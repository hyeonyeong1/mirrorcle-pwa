// PWA Í¥ÄÎ†® Î≥ÄÏàò
let deferredPrompt;
let isInstalled = false;

// Ïï± Í¥ÄÎ†® Î≥ÄÏàò
const MODELS = {
  emotion: "https://teachablemachine.withgoogle.com/models/_Yn5oTjFE/",
  skin: "https://teachablemachine.withgoogle.com/models/Zd0FUwzdG/"
};

let currentMode = null;
let model, webcam, maxPredictions;
let emotionDetected = false;
let animationId;
let detectionActive = false;
let countdownInterval;
let timeLeft = 5;

// YouTube API ÌÇ§ (Ïã§Ï†ú ÏÇ¨Ïö©ÏãúÏóêÎäî Î≥∏Ïù∏Ïùò API ÌÇ§Î°ú ÍµêÏ≤¥ ÌïÑÏöî)
const YOUTUBE_API_KEY = '_YOUTUBE_API_KEY';

// Í∞êÏ†ïÎ≥Ñ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ Í≤ÄÏÉâ ÌÇ§ÏõåÎìú
const musicKeywords = {
  'ÌñâÎ≥µÌïú ÌëúÏ†ï': ['Ïã†ÎÇòÎäî ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏'], 
  'Ïä¨ÌîàÌëúÏ†ï': ['Í∞êÏÑ± ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏'], 
  'Î¨¥ÌëúÏ†ï': ['Î©úÎ°† 100']
};

// Í∞êÏ†ïÎ≥Ñ Ïù¥Î™®ÏßÄ Îß§Ìïë
const emotionEmojis = {
  'ÌñâÎ≥µÌïú ÌëúÏ†ï': 'üòä', 
  'Ïä¨ÌîàÌëúÏ†ï': 'üò¢', 
  'Î¨¥ÌëúÏ†ï': 'üòê'
};

// ÌîºÎ∂Ä ÏÉÅÌÉúÎ≥Ñ Ïù¥Î™®ÏßÄ Îß§Ìïë
const skinEmojis = {
  'Good': '‚ú®', 'Normal': 'üòä', 'Dry': 'üåµ', 'Oily': 'üíß',
  'Acne': 'üî¥', 'Sensitive': 'üå∏',
  'Ìä∏Îü¨Î∏î': 'üòî', 'Ï†ïÏÉÅ ÌîºÎ∂Ä': 'üòä', 'ÌôîÎ©¥Ïóê ÏñºÍµ¥ÏùÑ Í∞ÄÍπåÏù¥ Ìï¥Ï£ºÏÑ∏Ïöî': 'üì∑',
  'ÌïôÏäµÏÑ± Ïó¨ÎìúÎ¶Ñ': 'üò∞', 'Í±¥ÏÑ±': 'üåµ', 'ÏßÄÏÑ±': 'üíß', 'ÎØºÍ∞êÏÑ±': 'üå∏',
  'Class 1': '‚ú®', 'Class 2': 'üòä', 'Class 3': 'üòî',
  'Class 4': 'üíß', 'Class 5': 'üî¥', 'Class 6': 'üå∏'
};

// PWA Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', function() {
  initPWA();
  checkURLParams();
});

// PWA Í∏∞Îä• Ï¥àÍ∏∞Ìôî
async function initPWA() {
  // Service Worker Îì±Î°ù
  if ('serviceWorker' in navigator) {
    try {
      const registration = await navigator.serviceWorker.register('/sw.js');
      console.log('Service Worker Îì±Î°ù ÏÑ±Í≥µ:', registration.scope);
      
      // ÏóÖÎç∞Ïù¥Ìä∏ ÌôïÏù∏
      registration.addEventListener('updatefound', () => {
        const newWorker = registration.installing;
        newWorker.addEventListener('statechange', () => {
          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
            // ÏÉà Î≤ÑÏ†ÑÏù¥ ÏÑ§ÏπòÎê®
            showUpdateNotification();
          }
        });
      });
      
    } catch (error) {
      console.error('Service Worker Îì±Î°ù Ïã§Ìå®:', error);
    }
  }
  
  // ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ Ï≤òÎ¶¨
  window.addEventListener('beforeinstallprompt', (e) => {
    console.log('ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ Ïù¥Î≤§Ìä∏ Î∞úÏÉù');
    e.preventDefault();
    deferredPrompt = e;
    showInstallPrompt();
  });
  
  // Ïï± ÏÑ§Ïπò ÏôÑÎ£å Í∞êÏßÄ
  window.addEventListener('appinstalled', (e) => {
    console.log('Ïï± ÏÑ§Ïπò ÏôÑÎ£å');
    isInstalled = true;
    hideInstallPrompt();
    showToast('MirrorcleÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÑ§ÏπòÎêòÏóàÏäµÎãàÎã§! üéâ');
  });
  
  // Ïù¥ÎØ∏ ÏÑ§ÏπòÎêú ÏÉÅÌÉúÏù∏ÏßÄ ÌôïÏù∏
  if (window.matchMedia('(display-mode: standalone)').matches) {
    isInstalled = true;
    console.log('Ïù¥ÎØ∏ ÏÑ§ÏπòÎêú ÏÉÅÌÉúÎ°ú Ïã§Ìñâ Ï§ë');
  }
}

// URL ÌååÎùºÎØ∏ÌÑ∞ ÌôïÏù∏ (Î∞îÎ°úÍ∞ÄÍ∏∞ ÎßÅÌÅ¨ Ï≤òÎ¶¨)
function checkURLParams() {
  const urlParams = new URLSearchParams(window.location.search);
  const mode = urlParams.get('mode');
  
  if (mode && (mode === 'emotion' || mode === 'skin')) {
    selectMode(mode);
  }
}

// ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ ÌëúÏãú
function showInstallPrompt() {
  if (!isInstalled) {
    const installPrompt = document.getElementById('installPrompt');
    installPrompt.classList.add('show');
    
    document.getElementById('installBtn').addEventListener('click', installApp);
  }
}

// ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ Ïà®Í∏∞Í∏∞
function hideInstallPrompt() {
  const installPrompt = document.getElementById('installPrompt');
  installPrompt.classList.remove('show');
  localStorage.setItem('installPromptHidden', 'true');
}

// Ïï± ÏÑ§Ïπò
async function installApp() {
  if (deferredPrompt) {
    try {
      deferredPrompt.prompt();
      const { outcome } = await deferredPrompt.userChoice;
      
      if (outcome === 'accepted') {
        console.log('ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ§ÏπòÎ•º ÏäπÏù∏ÌñàÏäµÎãàÎã§');
      } else {
        console.log('ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ§ÏπòÎ•º Í±∞Î∂ÄÌñàÏäµÎãàÎã§');
      }
      
      deferredPrompt = null;
      hideInstallPrompt();
    } catch (error) {
      console.error('ÏÑ§Ïπò Ï§ë Ïò§Î•ò:', error);
      // iOS SafariÏùò Í≤ΩÏö∞ ÏàòÎèô ÏÑ§Ïπò ÏïàÎÇ¥
      if (navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome')) {
        showIOSInstallGuide();
      }
    }
  } else {
    // iOS SafariÏùò Í≤ΩÏö∞ ÏàòÎèô ÏÑ§Ïπò ÏïàÎÇ¥
    if (navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome')) {
      showIOSInstallGuide();
    }
  }
}

// iOS ÏÑ§Ïπò Í∞ÄÏù¥Îìú ÌëúÏãú
function showIOSInstallGuide() {
  const guide = `
    iOSÏóêÏÑú Ïï±ÏúºÎ°ú ÏÑ§ÏπòÌïòÍ∏∞:
    1. ÌôîÎ©¥ ÌïòÎã®Ïùò Í≥µÏú† Î≤ÑÌäº(üì§)ÏùÑ ÌÉ≠ÌïòÏÑ∏Ïöî
    2. "Ìôà ÌôîÎ©¥Ïóê Ï∂îÍ∞Ä"Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî
    3. "Ï∂îÍ∞Ä"Î•º ÌÉ≠ÌïòÏó¨ ÏÑ§ÏπòÎ•º ÏôÑÎ£åÌïòÏÑ∏Ïöî
  `;
  
  alert(guide);
}

// ÏóÖÎç∞Ïù¥Ìä∏ ÏïåÎ¶º ÌëúÏãú
function showUpdateNotification() {
  if (confirm('ÏÉàÎ°úÏö¥ Î≤ÑÏ†ÑÏù¥ ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
    window.location.reload();
  }
}

// ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ ÌëúÏãú
function showToast(message) {
  const toast = document.createElement('div');
  toast.style.cssText = `
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: #4CAF50;
    color: white;
    padding: 15px 25px;
    border-radius: 25px;
    z-index: 10000;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    animation: slideInDown 0.3s ease-out;
  `;
  toast.textContent = message;
  
  document.body.appendChild(toast);
  
  setTimeout(() => {
    toast.style.animation = 'slideOutUp 0.3s ease-in';
    setTimeout(() => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }, 300);
  }, 3000);
}

// Î™®Îìú ÏÑ†ÌÉù Ìï®Ïàò
function selectMode(mode) {
  currentMode = mode;
  document.getElementById('mode-selection').style.display = 'none';
  document.getElementById('main-content').style.display = 'block';
  
  if (mode === 'emotion') {
    document.getElementById('mode-title').innerHTML = 'üòä ÌëúÏ†ï Í∞êÏ†ï Ïù∏Ïãù';
    document.getElementById('startBtn').innerText = 'Í∞êÏ†ï Ïù∏Ïãù ÏãúÏûë';
  } else if (mode === 'skin') {
    document.getElementById('mode-title').innerHTML = '‚ú® ÌîºÎ∂Ä ÏÉÅÌÉú Î∂ÑÏÑù';
    document.getElementById('startBtn').innerText = 'ÌîºÎ∂Ä Î∂ÑÏÑù ÏãúÏûë';
  }
  
  init();
}

// Îí§Î°úÍ∞ÄÍ∏∞ Ìï®Ïàò
function goBack() {
  if (webcam) {
    webcam.stop();
  }
  if (countdownInterval) {
    clearInterval(countdownInterval);
  }
  
  document.getElementById('main-content').style.display = 'none';
  document.getElementById('mode-selection').style.display = 'block';
  
  currentMode = null;
  model = null;
  webcam = null;
  emotionDetected = false;
  detectionActive = false;
  
  const container = document.getElementById('webcam-container');
  container.innerHTML = '';
}

// Ï¥àÍ∏∞Ìôî Ìï®Ïàò
async function init() {
  const statusDiv = document.getElementById('status');
  
  try {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      throw new Error('ÏõπÏ∫†Ïù¥ ÏßÄÏõêÎêòÏßÄ ÏïäÎäî Î∏åÎùºÏö∞Ï†ÄÏûÖÎãàÎã§.');
    }

    statusDiv.innerHTML = 'ü§ñ AI Î™®Îç∏ Î°úÎî© Ï§ë...';
    
    const modelURL = MODELS[currentMode] + "model.json";
    const metadataURL = MODELS[currentMode] + "metadata.json";
    
    model = await tmImage.load(modelURL, metadataURL);
    maxPredictions = model.getTotalClasses();
    
    statusDiv.innerHTML = 'üì∑ ÏõπÏ∫† ÏÑ§Ï†ï Ï§ë...';
    
    const flip = true;
    webcam = new tmImage.Webcam(400, 400, flip);
    await webcam.setup();
    await webcam.play();
    
    document.getElementById("webcam-container").appendChild(webcam.canvas);
    
    const modeText = currentMode === 'emotion' ? 'Í∞êÏ†ï Ïù∏Ïãù' : 'ÌîºÎ∂Ä Î∂ÑÏÑù';
    statusDiv.innerHTML = `‚úÖ Ï§ÄÎπÑ ÏôÑÎ£å! Î≤ÑÌäºÏùÑ ÎàåÎü¨ ${modeText}ÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî.`;
    statusDiv.className = 'success';
    
    document.getElementById('startBtn').disabled = false;
    
    loop();
    
  } catch (error) {
    console.error('Ï¥àÍ∏∞Ìôî Ïò§Î•ò:', error);
    statusDiv.innerHTML = `‚ùå Ïò§Î•ò: ${error.message}`;
    statusDiv.className = 'error';
    
    if (error.name === 'NotAllowedError' || error.message.includes('Permission')) {
      const retryBtn = document.createElement('button');
      retryBtn.innerText = 'ÏõπÏ∫† Í∂åÌïú ÌóàÏö©ÌïòÍ≥† Ïû¨ÏãúÎèÑ';
      retryBtn.onclick = () => location.reload();
      document.getElementById('controls').appendChild(retryBtn);
    }
  }
}

// Î£®ÌîÑ Ìï®Ïàò
async function loop() {
  if (webcam) {
    webcam.update();
    await predict();
    requestAnimationFrame(loop);
  }
}

// ÏòàÏ∏° Ìï®Ïàò
async function predict() {
  if (!model || !webcam) return;
  
  try {
    const prediction = await model.predict(webcam.canvas);
    
    updatePredictionDisplay(prediction);
    
    if (detectionActive && !emotionDetected) {
      const topPrediction = prediction.reduce((a, b) => 
        a.probability > b.probability ? a : b
      );
      
      if (topPrediction.probability > 0.6) {
        emotionDetected = true;
        detectionActive = false;
        clearInterval(countdownInterval);
        
        const emojiMap = currentMode === 'emotion' ? emotionEmojis : skinEmojis;
        const emoji = emojiMap[topPrediction.className] || 'ü§î';
        const modeText = currentMode === 'emotion' ? 'Í∞êÏ†ï Ïù∏Ïãù' : 'ÌîºÎ∂Ä Î∂ÑÏÑù';
        
        document.getElementById('status').innerHTML = 
          `‚úÖ ${modeText} ÏÑ±Í≥µ!<br>${emoji} ${topPrediction.className} (${Math.round(topPrediction.probability * 100)}%)`;
        document.getElementById('status').className = 'success';
        
        if (currentMode === 'emotion') {
          recommendMusic(topPrediction.className);
        } else if (currentMode === 'skin') {
          // ÌîºÎ∂Ä Î∂ÑÏÑù ÏôÑÎ£å ÌõÑ ÌîºÎ∂Ä ÌÉÄÏûÖ ÏÑ†ÌÉù Î™®Îã¨ ÌëúÏãú
          setTimeout(() => {
            showSkinTypeModal();
          }, 1500); // 1.5Ï¥à ÌõÑ Î™®Îã¨ ÌëúÏãú
        }
        
        showRestartButton();
      }
    }
    
  } catch (error) {
    console.error('ÏòàÏ∏° Ïò§Î•ò:', error);
  }
}

// ÏòàÏ∏° Í≤∞Í≥º ÌëúÏãú Ìï®Ïàò
function updatePredictionDisplay(predictions) {
  const predictionList = document.getElementById('prediction-list');
  const predictionsDiv = document.getElementById('predictions');
  
  if (!detectionActive) {
    predictionsDiv.style.display = 'block';
  }
  
  predictionList.innerHTML = '';
  
  const emojiMap = currentMode === 'emotion' ? emotionEmojis : skinEmojis;
  
  predictions
    .sort((a, b) => b.probability - a.probability)
    .forEach(pred => {
      const item = document.createElement('div');
      item.className = 'prediction-item';
      
      const emoji = emojiMap[pred.className] || 'ü§î';
      const percentage = Math.round(pred.probability * 100);
      
      item.innerHTML = `
        <span>${emoji} ${pred.className}</span>
        <div class="prediction-bar">
          <div class="prediction-fill" style="width: ${percentage}%"></div>
        </div>
        <span>${percentage}%</span>
      `;
      
      predictionList.appendChild(item);
    });
}

// Í∞êÏßÄ ÏãúÏûë Ìï®Ïàò
function startDetection() {
  if (emotionDetected) {
    restart();
    return;
  }
  
  detectionActive = true;
  emotionDetected = false;
  timeLeft = 5;
  
  document.getElementById('startBtn').disabled = true;
  document.getElementById('predictions').style.display = 'none';
  
  const modeText = currentMode === 'emotion' ? 'Í∞êÏ†ï Î∂ÑÏÑù' : 'ÌîºÎ∂Ä Î∂ÑÏÑù';
  const instructionText = currentMode === 'emotion' ? 
    'Ïπ¥Î©îÎùºÎ•º Î≥¥Í≥† ÌëúÏ†ïÏùÑ ÏßÄÏñ¥Ï£ºÏÑ∏Ïöî!' : 
    'Ïπ¥Î©îÎùºÎ•º Î≥¥Í≥† ÏñºÍµ¥ÏùÑ Ï†ïÎ©¥ÏúºÎ°ú ÎßûÏ∂∞Ï£ºÏÑ∏Ïöî!';
  
  countdownInterval = setInterval(() => {
    if (detectionActive && timeLeft > 0) {
      document.getElementById('status').innerHTML = 
        `üîç ${modeText} Ï§ë... (${timeLeft}Ï¥à ÎÇ®Ïùå)<br>${instructionText}`;
      document.getElementById('status').className = '';
      timeLeft--;
    } else if (detectionActive) {
      detectionActive = false;
      emotionDetected = false;
      clearInterval(countdownInterval);
      
      document.getElementById('status').innerHTML = 
        `‚ùå ${modeText} Ïã§Ìå® (5Ï¥à Ï¥àÍ≥º)<br>Îçî Î™ÖÌôïÌïòÍ≤å ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî!`;
      document.getElementById('status').className = 'error';
      
      showRestartButton();
    }
  }, 1000);
  
  setTimeout(() => {
    if (detectionActive && !emotionDetected) {
      detectionActive = false;
      clearInterval(countdownInterval);
      
      const modeText = currentMode === 'emotion' ? 'Í∞êÏ†ï Ïù∏Ïãù' : 'ÌîºÎ∂Ä Î∂ÑÏÑù';
      document.getElementById('status').innerHTML = 
        `‚ùå ${modeText} Ïã§Ìå® (5Ï¥à Ï¥àÍ≥º)<br>Îçî Î™ÖÌôïÌïòÍ≤å ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî!`;
      document.getElementById('status').className = 'error';
      
      showRestartButton();
    }
  }, 5000);
}

// Ïû¨ÏãúÏûë Î≤ÑÌäº ÌëúÏãú Ìï®Ïàò
function showRestartButton() {
  document.getElementById('startBtn').style.display = 'none';
  document.getElementById('restartBtn').style.display = 'inline-block';
  document.getElementById('predictions').style.display = 'block';
}

// Ïû¨ÏãúÏûë Ìï®Ïàò
function restart() {
  detectionActive = false;
  emotionDetected = false;
  clearInterval(countdownInterval);
  
  const modeText = currentMode === 'emotion' ? 'Í∞êÏ†ï Ïù∏Ïãù' : 'ÌîºÎ∂Ä Î∂ÑÏÑù';
  document.getElementById('status').innerHTML = 
    `‚úÖ Ï§ÄÎπÑ ÏôÑÎ£å! Î≤ÑÌäºÏùÑ ÎàåÎü¨ ${modeText}ÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî.`;
  document.getElementById('status').className = 'success';
  
  document.getElementById('startBtn').style.display = 'inline-block';
  document.getElementById('startBtn').disabled = false;
  document.getElementById('restartBtn').style.display = 'none';
  document.getElementById('predictions').style.display = 'block';
  
  document.getElementById('music-recommendation').style.display = 'none';
}

// YouTube ÏùåÏïÖ Ï∂îÏ≤ú Ìï®Ïàò
async function recommendMusic(emotion) {
  const musicDiv = document.getElementById('music-recommendation');
  const musicContent = document.getElementById('music-content');
  
  musicDiv.style.display = 'block';
  musicContent.innerHTML = '<div class="loading-music">üéµ ÎãπÏã†Ïùò Í∏∞Î∂ÑÏóê ÎßûÎäî ÏùåÏïÖÏùÑ Ï∞æÍ≥† ÏûàÏäµÎãàÎã§...</div>';
  
  try {
    if (YOUTUBE_API_KEY === 'YOUR_YOUTUBE_API_KEY') {
      showDummyMusic(emotion);
      return;
    }
    
    const keywords = musicKeywords[emotion];
    if (!keywords) {
      console.log('Í∞êÏ†ïÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå:', emotion);
      showDummyMusic(emotion);
      return;
    }
    
    const randomKeyword = keywords[Math.floor(Math.random() * keywords.length)];
    console.log('ÏÑ†ÌÉùÎêú Í∞êÏ†ï:', emotion, 'Í≤ÄÏÉâ ÌÇ§ÏõåÎìú:', randomKeyword);
    
    const response = await fetch(
      `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(randomKeyword)}&type=video&videoDuration=long&maxResults=6&key=${YOUTUBE_API_KEY}`
    );
    
    if (!response.ok) {
      throw new Error('YouTube API Ìò∏Ï∂ú Ïã§Ìå®');
    }
    
    const data = await response.json();
    displayMusic(data.items, emotion);
    
  } catch (error) {
    console.error('ÏùåÏïÖ Ï∂îÏ≤ú Ïò§Î•ò:', error);
    showDummyMusic(emotion);
  }
}

// Ïã§Ï†ú YouTube Îç∞Ïù¥ÌÑ∞ ÌëúÏãú
function displayMusic(videos, emotion) {
  const musicContent = document.getElementById('music-content');
  const emotionText = getEmotionText(emotion);
  
  let html = `<p style="text-align: center; margin-bottom: 15px; color: #666;">
    ${emotionText} Í∏∞Î∂ÑÏóê Ïñ¥Ïö∏Î¶¨Îäî ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏Î•º Ï∂îÏ≤úÌï¥ÎìúÎ†§Ïöî! üéµ
  </p><div class="music-grid">`;
  
  videos.forEach(video => {
    html += `
      <div class="music-item" onclick="playYouTubeVideo('${video.id.videoId}')">
        <img src="${video.snippet.thumbnails.medium.url}" 
             alt="${video.snippet.title}" 
             class="music-thumbnail"
             onerror="this.src='https://via.placeholder.com/240x135/333/fff?text=üéµ'">
        <div class="music-info">
          <div class="music-title-text">${video.snippet.title}</div>
          <div class="music-channel">${video.snippet.channelTitle}</div>
          <button class="play-button" onclick="event.stopPropagation(); playYouTubeVideo('${video.id.videoId}')">
            ‚ñ∂Ô∏è Ïû¨ÏÉù
          </button>
        </div>
      </div>
    `;
  });
  
  html += '</div>';
  musicContent.innerHTML = html;
}

// ÎçîÎØ∏ ÏùåÏïÖ Îç∞Ïù¥ÌÑ∞ ÌëúÏãú (API ÌÇ§Í∞Ä ÏóÜÏùÑ Îïå) - Ïç∏ÎÑ§Ïùº Î¨∏Ï†ú Ìï¥Í≤∞
function showDummyMusic(emotion) {
  const musicContent = document.getElementById('music-content');
  const emotionText = getEmotionText(emotion);
  
  console.log('ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÌëúÏãú - Í∞êÏ†ï:', emotion, 'Í∞êÏ†ï ÌÖçÏä§Ìä∏:', emotionText);
  
  const dummyVideos = getDummyMusicData(emotion);
  console.log('ÏÑ†ÌÉùÎêú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞:', dummyVideos);
  
  let html = `<p style="text-align: center; margin-bottom: 15px; color: #666;">
    ${emotionText} Í∏∞Î∂ÑÏóê Ïñ¥Ïö∏Î¶¨Îäî ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏Î•º Ï∂îÏ≤úÌï¥ÎìúÎ†§Ïöî! üéµ<br>
    <small style="color: #999;">(YouTube API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïÑ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Î•º ÌëúÏãúÌï©ÎãàÎã§)</small>
  </p><div class="music-grid">`;
  
  dummyVideos.forEach((video, index) => {
    // Í∞êÏ†ïÏóê Îî∞Î•∏ Ïç∏ÎÑ§Ïùº ÏÉâÏÉÅ ÏÑ†ÌÉù
    const thumbnailColor = getThumbnailColor(emotion);
    const thumbnailUrl = `https://via.placeholder.com/240x135/${thumbnailColor}/fff?text=üéµ`;
    
    html += `
      <div class="music-item" onclick="searchYouTube('${video.title}')">
        <img src="${thumbnailUrl}" 
             alt="${video.title}" 
             class="music-thumbnail"
             loading="lazy">
        <div class="music-info">
          <div class="music-title-text">${video.title}</div>
          <div class="music-channel">${video.artist}</div>
          <button class="play-button" onclick="event.stopPropagation(); searchYouTube('${video.title}')">
            üîç YouTubeÏóêÏÑú Ï∞æÍ∏∞
          </button>
        </div>
      </div>
    `;
  });
  
  html += '</div>';
  musicContent.innerHTML = html;
}

// Í∞êÏ†ïÏóê Îî∞Î•∏ Ïç∏ÎÑ§Ïùº ÏÉâÏÉÅ Î∞òÌôò
function getThumbnailColor(emotion) {
  const normalizedEmotion = emotion.trim().toLowerCase();
  
  if (normalizedEmotion.includes('ÌñâÎ≥µ') || normalizedEmotion.includes('happy') || normalizedEmotion.includes('joy')) {
    return 'FFD700'; // Í∏àÏÉâ (ÌñâÎ≥µÌïú ÎäêÎÇå)
  } else if (normalizedEmotion.includes('Ïä¨Ìîà') || normalizedEmotion.includes('sad') || normalizedEmotion.includes('Ïö∞Ïö∏')) {
    return '4169E1'; // Î°úÏñÑÎ∏îÎ£® (Ï∞®Î∂ÑÌïú ÎäêÎÇå)
  } else {
    return '32CD32'; // ÎùºÏûÑÍ∑∏Î¶∞ (Ï§ëÎ¶ΩÏ†ÅÏù∏ ÎäêÎÇå)
  }
}

// Í∞êÏ†ïÏóê Îî∞Î•∏ Ï∞®Î≥ÑÌôîÎêú ÎçîÎØ∏ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ - ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ
function getDummyMusicData(emotion) {
  console.log('getDummyMusicData Ìò∏Ï∂úÎê® - Í∞êÏ†ï:', emotion);
  
  // Í∞êÏ†ï Í∞í Ï†ïÍ∑úÌôî (Í≥µÎ∞±, ÎåÄÏÜåÎ¨∏Ïûê Ï≤òÎ¶¨)
  const normalizedEmotion = emotion.trim().toLowerCase();
  
  const playlistData = {
    // Îã§ÏñëÌïú ÌòïÌÉúÏùò ÌñâÎ≥µÌïú Í∞êÏ†ï ÌÇ§Îì§
    'ÌñâÎ≥µÌïú ÌëúÏ†ï': [
      { title: '[Ïã†ÎÇòÎäî ÏùåÏïÖ] ÎìúÎùºÏù¥Î∏åÌï† Îïå Îì£Í∏∞ Ï¢ãÏùÄ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Music Playlist' },
      { title: 'Ïã†ÎÇòÎäî ÌåùÏÜ° Î™®Ïùå | Í∏∞Î∂Ñ Ï¢ãÏïÑÏßÄÎäî ÎÖ∏Îûò ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Pop Music' },
      { title: 'ÎåÑÏä§ ÎÆ§ÏßÅ Î≤†Ïä§Ìä∏ | ÌååÌã∞ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ Ïã†ÎÇòÎäî ÏùåÏïÖ', artist: 'Dance Hits' },
      { title: 'Ïã†ÎÇòÎäî K-POP ÎåÑÏä§Í≥° Î™®Ïùå | Ïö¥ÎèôÌï† Îïå Îì£Îäî ÎÖ∏Îûò', artist: 'K-Pop Dance' },
      { title: 'Ïã†ÎÇòÎäî EDM ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ | ÌÅ¥ÎüΩ ÎÆ§ÏßÅ Î≤†Ïä§Ìä∏', artist: 'EDM Hits' },
      { title: 'Í∏∞Î∂Ñ Ï¢ãÏïÑÏßÄÎäî Ïã†ÎÇòÎäî ÏùåÏïÖ Î™®ÏùåÏßë', artist: 'Feel Good Music' }
    ],
    'happy': [
      { title: '[Ïã†ÎÇòÎäî ÏùåÏïÖ] ÎìúÎùºÏù¥Î∏åÌï† Îïå Îì£Í∏∞ Ï¢ãÏùÄ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Music Playlist' },
      { title: 'Ïã†ÎÇòÎäî ÌåùÏÜ° Î™®Ïùå | Í∏∞Î∂Ñ Ï¢ãÏïÑÏßÄÎäî ÎÖ∏Îûò ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Pop Music' },
      { title: 'ÎåÑÏä§ ÎÆ§ÏßÅ Î≤†Ïä§Ìä∏ | ÌååÌã∞ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ Ïã†ÎÇòÎäî ÏùåÏïÖ', artist: 'Dance Hits' },
      { title: 'Ïã†ÎÇòÎäî K-POP ÎåÑÏä§Í≥° Î™®Ïùå | Ïö¥ÎèôÌï† Îïå Îì£Îäî ÎÖ∏Îûò', artist: 'K-Pop Dance' },
      { title: 'Ïã†ÎÇòÎäî EDM ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ | ÌÅ¥ÎüΩ ÎÆ§ÏßÅ Î≤†Ïä§Ìä∏', artist: 'EDM Hits' },
      { title: 'Í∏∞Î∂Ñ Ï¢ãÏïÑÏßÄÎäî Ïã†ÎÇòÎäî ÏùåÏïÖ Î™®ÏùåÏßë', artist: 'Feel Good Music' }
    ],
    
    // Îã§ÏñëÌïú ÌòïÌÉúÏùò Ïä¨Ìîà Í∞êÏ†ï ÌÇ§Îì§
    'Ïä¨ÌîàÌëúÏ†ï': [
      { title: 'Í∞êÏÑ± Î∞úÎùºÎìú Î™®Ïùå | Î∞§Ïóê Îì£Í∏∞ Ï¢ãÏùÄ Ïä¨Ìîà ÎÖ∏Îûò', artist: 'Ballad Collection' },
      { title: 'Í∞êÏÑ± ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ | Ïö∞Ïö∏Ìï† Îïå Îì£Îäî ÏùåÏïÖ Î™®Ïùå', artist: 'Emotional Music' },
      { title: 'Ïù¥Î≥Ñ ÎÖ∏Îûò Î™®Ïùå | Ïä¨Ìîà Í∞êÏÑ± Î∞úÎùºÎìú ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Breakup Songs' },
      { title: 'Í∞êÏÑ± Ïù∏Îîî ÏùåÏïÖ | ÌòºÏûê ÏûàÏùÑ Îïå Îì£Îäî ÎÖ∏Îûò', artist: 'Indie Emotional' },
      { title: 'ÎπÑ Ïò§Îäî ÎÇ† Îì£Í∏∞ Ï¢ãÏùÄ Í∞êÏÑ± ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Rainy Day Music' },
      { title: 'Í∞êÏÑ± R&B Î™®Ïùå | ÍπäÏùÄ Î∞§ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'R&B Emotional' }
    ],
    'sad': [
      { title: 'Í∞êÏÑ± Î∞úÎùºÎìú Î™®Ïùå | Î∞§Ïóê Îì£Í∏∞ Ï¢ãÏùÄ Ïä¨Ìîà ÎÖ∏Îûò', artist: 'Ballad Collection' },
      { title: 'Í∞êÏÑ± ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ | Ïö∞Ïö∏Ìï† Îïå Îì£Îäî ÏùåÏïÖ Î™®Ïùå', artist: 'Emotional Music' },
      { title: 'Ïù¥Î≥Ñ ÎÖ∏Îûò Î™®Ïùå | Ïä¨Ìîà Í∞êÏÑ± Î∞úÎùºÎìú ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Breakup Songs' },
      { title: 'Í∞êÏÑ± Ïù∏Îîî ÏùåÏïÖ | ÌòºÏûê ÏûàÏùÑ Îïå Îì£Îäî ÎÖ∏Îûò', artist: 'Indie Emotional' },
      { title: 'ÎπÑ Ïò§Îäî ÎÇ† Îì£Í∏∞ Ï¢ãÏùÄ Í∞êÏÑ± ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Rainy Day Music' },
      { title: 'Í∞êÏÑ± R&B Î™®Ïùå | ÍπäÏùÄ Î∞§ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'R&B Emotional' }
    ],
    
    // Îã§ÏñëÌïú ÌòïÌÉúÏùò Î¨¥ÌëúÏ†ï/Ï§ëÎ¶Ω Í∞êÏ†ï ÌÇ§Îì§
    'Î¨¥ÌëúÏ†ï': [
      { title: 'Î©úÎ°† Ï∞®Ìä∏ TOP 100 | ÏµúÏã† Ïù∏Í∏∞Í≥° Î™®Ïùå', artist: 'Melon Chart' },
      { title: '2024 Î©úÎ°† Ïó∞Í∞ÑÏ∞®Ìä∏ Î≤†Ïä§Ìä∏ 100', artist: 'Melon Annual Chart' },
      { title: 'Î©úÎ°† Ïã§ÏãúÍ∞Ñ Ï∞®Ìä∏ 1ÏúÑ~100ÏúÑ ÎÖºÏä§ÌÜ±', artist: 'Melon Real-time' },
      { title: 'Î©úÎ°† HOT 100 | ÏßÄÍ∏à Í∞ÄÏû• Ïù∏Í∏∞ÏûàÎäî ÎÖ∏Îûò', artist: 'Melon Hot 100' },
      { title: 'Î©úÎ°†Ï∞®Ìä∏ Ïù∏Í∏∞Í≥° Î™®Ïùå | K-POP ÌûàÌä∏ÏÜ°', artist: 'Melon K-Pop Hits' },
      { title: 'Î©úÎ°† ÏõîÍ∞ÑÏ∞®Ìä∏ TOP 100 Î≤†Ïä§Ìä∏', artist: 'Melon Monthly Chart' }
    ],
    'neutral': [
      { title: 'Î©úÎ°† Ï∞®Ìä∏ TOP 100 | ÏµúÏã† Ïù∏Í∏∞Í≥° Î™®Ïùå', artist: 'Melon Chart' },
      { title: '2024 Î©úÎ°† Ïó∞Í∞ÑÏ∞®Ìä∏ Î≤†Ïä§Ìä∏ 100', artist: 'Melon Annual Chart' },
      { title: 'Î©úÎ°† Ïã§ÏãúÍ∞Ñ Ï∞®Ìä∏ 1ÏúÑ~100ÏúÑ ÎÖºÏä§ÌÜ±', artist: 'Melon Real-time' },
      { title: 'Î©úÎ°† HOT 100 | ÏßÄÍ∏à Í∞ÄÏû• Ïù∏Í∏∞ÏûàÎäî ÎÖ∏Îûò', artist: 'Melon Hot 100' },
      { title: 'Î©úÎ°†Ï∞®Ìä∏ Ïù∏Í∏∞Í≥° Î™®Ïùå | K-POP ÌûàÌä∏ÏÜ°', artist: 'Melon K-Pop Hits' },
      { title: 'Î©úÎ°† ÏõîÍ∞ÑÏ∞®Ìä∏ TOP 100 Î≤†Ïä§Ìä∏', artist: 'Melon Monthly Chart' }
    ]
  };
  
  // Î®ºÏ†Ä Ï†ïÌôïÌïú Îß§Ïπ≠ÏùÑ ÏãúÎèÑ
  let result = playlistData[emotion];
  
  // Ï†ïÌôïÌïú Îß§Ïπ≠Ïù¥ ÏóÜÏúºÎ©¥ Ï†ïÍ∑úÌôîÎêú ÌÇ§Î°ú Îß§Ïπ≠ ÏãúÎèÑ
  if (!result) {
    result = playlistData[normalizedEmotion];
  }
  
  // Ïó¨Ï†ÑÌûà Îß§Ïπ≠ÎêòÏßÄ ÏïäÏúºÎ©¥ Í∞êÏ†ï ÌÇ§ÏõåÎìúÎ•º Ìè¨Ìï®ÌïòÎäîÏßÄ ÌôïÏù∏
  if (!result) {
    if (normalizedEmotion.includes('ÌñâÎ≥µ') || normalizedEmotion.includes('happy') || normalizedEmotion.includes('joy')) {
      result = playlistData['ÌñâÎ≥µÌïú ÌëúÏ†ï'];
    } else if (normalizedEmotion.includes('Ïä¨Ìîà') || normalizedEmotion.includes('sad') || normalizedEmotion.includes('Ïö∞Ïö∏')) {
      result = playlistData['Ïä¨ÌîàÌëúÏ†ï'];
    } else {
      result = playlistData['Î¨¥ÌëúÏ†ï']; // Í∏∞Î≥∏Í∞í
    }
  }
  
  console.log('Î∞õÏùÄ Í∞êÏ†ï Í∞í:', emotion);
  console.log('Ï†ïÍ∑úÌôîÎêú Í∞êÏ†ï Í∞í:', normalizedEmotion);
  console.log('Îß§Ïπ≠Îêú ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ Í∏∏Ïù¥:', result?.length);
  console.log('Î∞òÌôòÎêòÎäî ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ Ï≤´ Î≤àÏß∏ Ìï≠Î™©:', result?.[0]);
  
  return result;
}

// Í∞êÏ†ï ÌÖçÏä§Ìä∏ Î≥ÄÌôò - Îçî Ïú†Ïó∞Ìïú Îß§Ïπ≠
function getEmotionText(emotion) {
  const normalizedEmotion = emotion.trim().toLowerCase();
  
  if (normalizedEmotion.includes('ÌñâÎ≥µ') || normalizedEmotion.includes('happy') || normalizedEmotion.includes('joy')) {
    return 'ÌñâÎ≥µÌïú';
  } else if (normalizedEmotion.includes('Ïä¨Ìîà') || normalizedEmotion.includes('sad') || normalizedEmotion.includes('Ïö∞Ïö∏')) {
    return 'Ïä¨Ìîà';
  } else {
    return 'Ï∞®Î∂ÑÌïú';
  }
}

// YouTube ÎèôÏòÅÏÉÅ Ïû¨ÏÉù (ÏÉà ÌÉ≠ÏóêÏÑú)
function playYouTubeVideo(videoId) {
  window.open(`https://www.youtube.com/watch?v=${videoId}`, '_blank');
}

// YouTube Í≤ÄÏÉâ (ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Ïö©)
function searchYouTube(query) {
  window.open(`https://www.youtube.com/results?search_query=${encodeURIComponent(query)}`, '_blank');
}

// Ï¢ÖÎ£å Ïãú Ï†ïÎ¶¨
window.addEventListener("beforeunload", () => {
  if (webcam) {
    webcam.stop();
  }
  if (countdownInterval) {
    clearInterval(countdownInterval);
  }
});

// CSS Ïï†ÎãàÎ©îÏù¥ÏÖò Ï∂îÍ∞Ä
const style = document.createElement('style');
style.textContent = `
  @keyframes slideInDown {
    from {
      opacity: 0;
      transform: translateX(-50%) translateY(-100%);
    }
    to {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
  }
  
  @keyframes slideOutUp {
    from {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
    to {
      opacity: 0;
      transform: translateX(-50%) translateY(-100%);
    }
  }
`;

// ÌîºÎ∂Ä ÌÉÄÏûÖÎ≥Ñ Ï†úÌíà Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§
const skinCareProducts = {
  'ÏßÄÏÑ±': {
    emoji: 'üíß',
    description: 'Í∏∞Î¶ÑÍ∏∞Í∞Ä ÎßéÏùÄ ÌîºÎ∂ÄÎ•º ÏúÑÌïú Ï†úÌíàÎì§',
    products: [
      {
        name: 'ÏÇ¥Î¶¨Ïã§ÏÇ∞ ÌÅ¥Î†åÏ†Ä',
        category: 'ÏÑ∏ÏïàÏ†ú',
        description: 'Î™®Í≥µ ÍπäÏàôÌïú Í∏∞Î¶ÑÍ∏∞ÏôÄ Í∞ÅÏßà Ï†úÍ±∞',
        price: '15,000Ïõê~25,000Ïõê',
        ingredients: 'ÏÇ¥Î¶¨Ïã§ÏÇ∞(BHA), Ìã∞Ìä∏Î¶¨Ïò§Ïùº'
      },
      {
        name: 'ÎÇòÏù¥ÏïÑÏã†ÏïÑÎßàÏù¥Îìú ÏÑ∏Îüº',
        category: 'ÏÑ∏Îüº',
        description: 'Î™®Í≥µ Ï∂ïÏÜå Î∞è ÌîºÏßÄ Ï°∞Ï†à',
        price: '20,000Ïõê~35,000Ïõê',
        ingredients: 'ÎÇòÏù¥ÏïÑÏã†ÏïÑÎßàÏù¥Îìú 5-10%, ÏïÑÏó∞'
      },
      {
        name: 'ÎÖºÏΩîÎ©îÎèÑÏ†úÎãâ ÏàòÎ∂ÑÌÅ¨Î¶º',
        category: 'Î≥¥ÏäµÏ†ú',
        description: 'Î™®Í≥µÏùÑ ÎßâÏßÄ ÏïäÎäî Í∞ÄÎ≤ºÏö¥ Î≥¥Ïäµ',
        price: '18,000Ïõê~30,000Ïõê',
        ingredients: 'ÌûàÏïåÎ£®Î°†ÏÇ∞, ÏÑ∏ÎùºÎßàÏù¥Îìú'
      }
    ],
    tips: ['ÌïòÎ£® 2Ìöå ÏÑ∏Ïïà', 'Í∏∞Î¶ÑÏ¢ÖÏù¥ ÏÇ¨Ïö© ÏûêÏ†ú', 'Í≥ºÎèÑÌïú ÏÑ∏ÏïàÏùÄ Í∏àÎ¨º', 'ÎÖºÏΩîÎ©îÎèÑÏ†úÎãâ Ï†úÌíà ÏÑ†ÌÉù']
  },
  'Í±¥ÏÑ±': {
    emoji: 'üåµ',
    description: 'ÏàòÎ∂ÑÏù¥ Î∂ÄÏ°±Ìïú ÌîºÎ∂ÄÎ•º ÏúÑÌïú Ï†úÌíàÎì§',
    products: [
      {
        name: 'ÏÑ∏ÎùºÎßàÏù¥Îìú ÌÅ¥Î†åÏ†Ä',
        category: 'ÏÑ∏ÏïàÏ†ú',
        description: 'ÏàòÎ∂ÑÏùÑ Ïú†ÏßÄÌïòÎ©∞ Î∂ÄÎìúÎüΩÍ≤å ÏÑ∏Ïïà',
        price: '18,000Ïõê~28,000Ïõê',
        ingredients: 'ÏÑ∏ÎùºÎßàÏù¥Îìú, Í∏ÄÎ¶¨ÏÑ∏Î¶∞, Ïä§Ïø†ÏïåÎûÄ'
      },
      {
        name: 'ÌûàÏïåÎ£®Î°†ÏÇ∞ ÏÑ∏Îüº',
        category: 'ÏÑ∏Îüº',
        description: 'ÍπäÏùÄ ÏàòÎ∂Ñ Í≥µÍ∏âÍ≥º Î≥¥ÏäµÎßâ ÌòïÏÑ±',
        price: '25,000Ïõê~40,000Ïõê',
        ingredients: 'Ï†ÄÎ∂ÑÏûê ÌûàÏïåÎ£®Î°†ÏÇ∞, Í∏ÄÎ¶¨ÏÑ∏Î¶∞'
      },
      {
        name: 'Î¶¨Ïπò Î™®Ïù¥Ïä§Ï≤òÎùºÏù¥Ï†Ä',
        category: 'Î≥¥ÏäµÏ†ú',
        description: 'ÏßÑÌïú ÏßàÍ∞êÏùò ÏòÅÏñë ÌÅ¨Î¶º',
        price: '30,000Ïõê~50,000Ïõê',
        ingredients: 'ÏãúÏñ¥Î≤ÑÌÑ∞, ÏÑ∏ÎùºÎßàÏù¥Îìú, ÏΩúÎùºÍ≤ê'
      }
    ],
    tips: ['ÎØ∏ÏßÄÍ∑ºÌïú Î¨ºÎ°ú ÏÑ∏Ïïà', 'ÏÑ∏Ïïà ÌõÑ 3Î∂Ñ ÎÇ¥ Î≥¥ÏäµÏ†ú ÏÇ¨Ïö©', 'Í∞ÄÏäµÍ∏∞ ÏÇ¨Ïö© Í∂åÏû•', 'Í∞ÅÏßà Ï†úÍ±∞Îäî Ï£º 1ÌöåÎßå']
  },
  'ÎØºÍ∞êÏÑ±': {
    emoji: 'üå∏',
    description: 'ÏûêÍ∑πÏóê ÎØºÍ∞êÌïú ÌîºÎ∂ÄÎ•º ÏúÑÌïú ÏàúÌïú Ï†úÌíàÎì§',
    products: [
      {
        name: 'ÏïΩÏÇ∞ÏÑ± ÌÅ¥Î†åÏ†Ä',
        category: 'ÏÑ∏ÏïàÏ†ú',
        description: 'ÏûêÍ∑π ÏóÜÎäî ÏàúÌïú pH Í∑†Ìòï ÏÑ∏ÏïàÏ†ú',
        price: '16,000Ïõê~26,000Ïõê',
        ingredients: 'ÏïÑÎØ∏ÎÖ∏ÏÇ∞ Í≥ÑÎ©¥ÌôúÏÑ±Ï†ú, ÌåêÌÖåÎÜÄ'
      },
      {
        name: 'ÏÑºÌÖîÎùº ÏßÑÏ†ï ÏÑ∏Îüº',
        category: 'ÏÑ∏Îüº',
        description: 'ÏóºÏ¶ù ÏßÑÏ†ï Î∞è ÌîºÎ∂Ä Ïû•Î≤Ω Í∞ïÌôî',
        price: '22,000Ïõê~38,000Ïõê',
        ingredients: 'ÏÑºÌÖîÎùº Ï∂îÏ∂úÎ¨º, ÌåêÌÖåÎÜÄ, Î≤†ÌÉÄÍ∏ÄÎ£®Ïπ∏'
      },
      {
        name: 'Î¨¥Ìñ•Î£å Î≥¥ÏäµÌÅ¨Î¶º',
        category: 'Î≥¥ÏäµÏ†ú',
        description: 'Ìñ•Î£å Î¨¥Ï≤®Í∞Ä Ï†ÄÏûêÍ∑π Î≥¥ÏäµÏ†ú',
        price: '20,000Ïõê~35,000Ïõê',
        ingredients: 'ÏÑ∏ÎùºÎßàÏù¥Îìú, ÏΩúÎ°úÏù¥Îìú Ïò§Ìä∏Î∞Ä'
      }
    ],
    tips: ['ÏÉà Ï†úÌíà ÏÇ¨Ïö© Ï†Ñ Ìå®Ïπò ÌÖåÏä§Ìä∏', 'Í∞ïÌïú ÏÑ±Î∂Ñ(Î†àÌã∞ÎÜÄ, AHA) ÌîºÌïòÍ∏∞', 'ÏûêÏô∏ÏÑ† Ï∞®Îã®Ï†ú ÌïÑÏàò', 'Ïä§Ìä∏Î†àÏä§ Í¥ÄÎ¶¨ Ï§ëÏöî']
  },
  'Î≥µÌï©ÏÑ±': {
    emoji: '‚öñÔ∏è',
    description: 'TÏ°¥ÏùÄ ÏßÄÏÑ±, Î≥ºÏùÄ Í±¥ÏÑ±Ïù∏ Î≥µÌï©ÏÑ± ÌîºÎ∂ÄÏö© Ï†úÌíàÎì§',
    products: [
      {
        name: 'Ï††ÌãÄ Ìèº ÌÅ¥Î†åÏ†Ä',
        category: 'ÏÑ∏ÏïàÏ†ú',
        description: 'Î∂ÄÏúÑÎ≥Ñ Ï∞®Î≥Ñ ÏºÄÏñ¥Í∞Ä Í∞ÄÎä•Ìïú Ï§ëÏÑ± ÏÑ∏ÏïàÏ†ú',
        price: '17,000Ïõê~27,000Ïõê',
        ingredients: 'ÏΩîÏΩîÏùº Í∏ÄÎ£®ÌÉÄÎ©îÏù¥Ìä∏, Í∏ÄÎ¶¨ÏÑ∏Î¶∞'
      },
      {
        name: 'ÎìÄÏñº ÏºÄÏñ¥ ÏÑ∏Îüº',
        category: 'ÏÑ∏Îüº',
        description: 'TÏ°¥Í≥º Î≥º Î∂ÄÏúÑ Ï∞®Î≥Ñ ÏºÄÏñ¥',
        price: '28,000Ïõê~45,000Ïõê',
        ingredients: 'ÎÇòÏù¥ÏïÑÏã†ÏïÑÎßàÏù¥Îìú, ÌûàÏïåÎ£®Î°†ÏÇ∞'
      },
      {
        name: 'Î∞∏Îü∞Ïã± Î°úÏÖò',
        category: 'Î≥¥ÏäµÏ†ú',
        description: 'Ïú†Î∂ÑÍ≥º ÏàòÎ∂ÑÏùò Í∑†ÌòïÏùÑ ÎßûÏ∂ò Ï†úÌíà',
        price: '25,000Ïõê~40,000Ïõê',
        ingredients: 'ÏÑ∏ÎùºÎßàÏù¥Îìú, Ïä§Ïø†ÏïåÎûÄ'
      }
    ],
    tips: ['Î∂ÄÏúÑÎ≥Ñ Îã§Î•∏ Ï†úÌíà ÏÇ¨Ïö©', 'TÏ°¥ÏùÄ Í∞ÄÎ≥çÍ≤å, Î≥ºÏùÄ Ï∂©Î∂ÑÌûà Î≥¥Ïäµ', 'ÏùºÏ£ºÏùºÏóê 1-2Ìöå TÏ°¥Îßå Í∞ÅÏßà Ï†úÍ±∞', 'Í≥ÑÏ†àÎ≥Ñ Ï†úÌíà Ï°∞Ï†ï']
  },
  'Ìä∏Îü¨Î∏î': {
    emoji: 'üî¥',
    description: 'Ïó¨ÎìúÎ¶ÑÍ≥º Ìä∏Îü¨Î∏îÏù¥ ÏûàÎäî ÌîºÎ∂ÄÎ•º ÏúÑÌïú ÏºÄÏñ¥ Ï†úÌíàÎì§',
    products: [
      {
        name: 'ÏÇ¥Î¶¨Ïã§ÏÇ∞ ÏõåÏãú',
        category: 'ÏÑ∏ÏïàÏ†ú',
        description: 'Î™®Í≥µ ÏÜç Í∞ÅÏßàÍ≥º ÏÑ∏Í∑† Ï†úÍ±∞',
        price: '18,000Ïõê~30,000Ïõê',
        ingredients: 'ÏÇ¥Î¶¨Ïã§ÏÇ∞ 0.5%, Ìã∞Ìä∏Î¶¨Ïò§Ïùº'
      },
      {
        name: 'Î≤§Ï°∞Ïùº ÌçºÏò•ÏÇ¨Ïù¥Îìú Ìä∏Î¶¨Ìä∏Î®ºÌä∏',
        category: 'Ìä∏Î¶¨Ìä∏Î®ºÌä∏',
        description: 'Ïó¨ÎìúÎ¶ÑÍ∑† ÏñµÏ†ú Î∞è ÏóºÏ¶ù ÏôÑÌôî',
        price: '15,000Ïõê~25,000Ïõê',
        ingredients: 'Î≤§Ï°∞Ïùº ÌçºÏò•ÏÇ¨Ïù¥Îìú 2.5%, ÏïåÎ°úÏóêÎ≤†Îùº'
      },
      {
        name: 'ÎÖºÏΩîÎ©îÎèÑÏ†úÎãâ Ï†§ ÌÅ¨Î¶º',
        category: 'Î≥¥ÏäµÏ†ú',
        description: 'Î™®Í≥µÏùÑ ÎßâÏßÄ ÏïäÎäî Í∞ÄÎ≤ºÏö¥ Ï†§ ÌÉÄÏûÖ',
        price: '20,000Ïõê~32,000Ïõê',
        ingredients: 'ÎÇòÏù¥ÏïÑÏã†ÏïÑÎßàÏù¥Îìú, ÏïÑÏó∞Ïò•ÏÇ¨Ïù¥Îìú'
      }
    ],
    tips: ['Ï†àÎåÄ ÏÜêÏúºÎ°ú ÏßúÏßÄ ÏïäÍ∏∞', 'Î≤†Í∞úÏª§Î≤Ñ ÏûêÏ£º ÍµêÏ≤¥', 'Ïú†Ï†úÌíàÍ≥º ÎãπÎ∂Ñ ÏÑ≠Ï∑® Ï§ÑÏù¥Í∏∞', 'Ï∂©Î∂ÑÌïú ÏàòÎ©¥Í≥º Ïä§Ìä∏Î†àÏä§ Í¥ÄÎ¶¨']
  },
  'Ï†ïÏÉÅ': {
    emoji: 'üòä',
    description: 'Í±¥Í∞ïÌïú Ï†ïÏÉÅ ÌîºÎ∂ÄÎ•º Ïú†ÏßÄÌïòÍ∏∞ ÏúÑÌïú Í∏∞Î≥∏ ÏºÄÏñ¥ Ï†úÌíàÎì§',
    products: [
      {
        name: 'ÎßàÏùºÎìú ÌÅ¥Î†åÏ†Ä',
        category: 'ÏÑ∏ÏïàÏ†ú',
        description: 'ÌîºÎ∂Ä Î≥∏Ïó∞Ïùò Í∑†ÌòïÏùÑ Ïú†ÏßÄÌïòÎäî ÏÑ∏ÏïàÏ†ú',
        price: '15,000Ïõê~25,000Ïõê',
        ingredients: 'ÏïÑÎØ∏ÎÖ∏ÏÇ∞ Í≥ÑÎ©¥ÌôúÏÑ±Ï†ú, Í∏ÄÎ¶¨ÏÑ∏Î¶∞'
      },
      {
        name: 'ÎπÑÌÉÄÎØº C ÏÑ∏Îüº',
        category: 'ÏÑ∏Îüº',
        description: 'Ìï≠ÏÇ∞Ìôî Î∞è Î∏åÎùºÏù¥Ìä∏Îãù Ìö®Í≥º',
        price: '25,000Ïõê~40,000Ïõê',
        ingredients: 'ÎπÑÌÉÄÎØºC Ïú†ÎèÑÏ≤¥, ÎπÑÌÉÄÎØºE'
      },
      {
        name: 'Îç∞ÏùºÎ¶¨ Î™®Ïù¥Ïä§Ï≤òÎùºÏù¥Ï†Ä',
        category: 'Î≥¥ÏäµÏ†ú',
        description: 'Îß§Ïùº ÏÇ¨Ïö©ÌïòÍ∏∞ Ï¢ãÏùÄ Í∞ÄÎ≤ºÏö¥ Î≥¥ÏäµÏ†ú',
        price: '20,000Ïõê~35,000Ïõê',
        ingredients: 'ÌûàÏïåÎ£®Î°†ÏÇ∞, ÏÑ∏ÎùºÎßàÏù¥Îìú'
      }
    ],
    tips: ['Íæ∏Ï§ÄÌïú ÏûêÏô∏ÏÑ† Ï∞®Îã®', 'Ï£º 1-2Ìöå Í∞ÅÏßà Ï†úÍ±∞', 'Ï∂©Î∂ÑÌïú ÏàòÎ∂Ñ ÏÑ≠Ï∑®', 'Í∑úÏπôÏ†ÅÏù∏ ÏÉùÌôú Ìå®ÌÑ¥ Ïú†ÏßÄ']
  }
};

// 1. ÌîºÎ∂Ä ÌÉÄÏûÖ ÏÑ†ÌÉù Î™®Îã¨ ÌëúÏãú Ìï®Ïàò
function showSkinTypeModal() {
  // Í∏∞Ï°¥ ÏùåÏïÖ Ï∂îÏ≤ú ÏòÅÏó≠ Ïà®Í∏∞Í∏∞
  const musicDiv = document.getElementById('music-recommendation');
  if (musicDiv) {
    musicDiv.style.display = 'none';
  }
  
  // ÌîºÎ∂Ä ÌÉÄÏûÖ Î™®Îã¨ HTMLÏù¥ ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
  let skinModal = document.getElementById('skin-type-modal');
  if (!skinModal) {
    skinModal = document.createElement('div');
    skinModal.id = 'skin-type-modal';
    skinModal.className = 'skin-modal';
    document.body.appendChild(skinModal);
  }
  
  // Î™®Îã¨ ÎÇ¥Ïö© ÏÉùÏÑ±
  skinModal.innerHTML = `
    <div class="skin-modal-content">
      <div class="skin-modal-header">
        <h2>üéØ ÌîºÎ∂Ä ÌÉÄÏûÖÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</h2>
        <button class="close-btn" onclick="closeSkinTypeModal()">√ó</button>
      </div>
      <div class="skin-modal-body">
        <p>AIÍ∞Ä Î∂ÑÏÑùÌïú Í≤∞Í≥ºÎ•º Î∞îÌÉïÏúºÎ°ú Îçî Ï†ïÌôïÌïú Ï†úÌíàÏùÑ Ï∂îÏ≤úÌïòÍ∏∞ ÏúÑÌï¥<br>ÌòÑÏû¨ ÌîºÎ∂Ä ÏÉÅÌÉúÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.</p>
        <div class="skin-type-grid">
          <button class="skin-type-btn" onclick="selectSkinType('ÏßÄÏÑ±')">
            <span class="skin-emoji">üíß</span>
            <span class="skin-name">ÏßÄÏÑ± ÌîºÎ∂Ä</span>
            <span class="skin-desc">Í∏∞Î¶ÑÍ∏∞Í∞Ä ÎßéÍ≥† Î™®Í≥µÏù¥ ÌÅ∞ Ìé∏</span>
          </button>
          <button class="skin-type-btn" onclick="selectSkinType('Í±¥ÏÑ±')">
            <span class="skin-emoji">üåµ</span>
            <span class="skin-name">Í±¥ÏÑ± ÌîºÎ∂Ä</span>
            <span class="skin-desc">Í±¥Ï°∞ÌïòÍ≥† ÎãπÍ∏∞Îäî ÎäêÎÇå</span>
          </button>
          <button class="skin-type-btn" onclick="selectSkinType('ÎØºÍ∞êÏÑ±')">
            <span class="skin-emoji">üå∏</span>
            <span class="skin-name">ÎØºÍ∞êÏÑ± ÌîºÎ∂Ä</span>
            <span class="skin-desc">ÏûêÍ∑πÏóê ÏâΩÍ≤å Î∞òÏùë</span>
          </button>
          <button class="skin-type-btn" onclick="selectSkinType('Î≥µÌï©ÏÑ±')">
            <span class="skin-emoji">‚öñÔ∏è</span>
            <span class="skin-name">Î≥µÌï©ÏÑ± ÌîºÎ∂Ä</span>
            <span class="skin-desc">TÏ°¥ÏùÄ ÏßÄÏÑ±, Î≥ºÏùÄ Í±¥ÏÑ±</span>
          </button>
          <button class="skin-type-btn" onclick="selectSkinType('Ìä∏Îü¨Î∏î')">
            <span class="skin-emoji">üî¥</span>
            <span class="skin-name">Ìä∏Îü¨Î∏î ÌîºÎ∂Ä</span>
            <span class="skin-desc">Ïó¨ÎìúÎ¶Ñ, Îæ∞Î£®ÏßÄÍ∞Ä ÏûàÏùå</span>
          </button>
          <button class="skin-type-btn" onclick="selectSkinType('Ï†ïÏÉÅ')">
            <span class="skin-emoji">üòä</span>
            <span class="skin-name">Ï†ïÏÉÅ ÌîºÎ∂Ä</span>
            <span class="skin-desc">ÌäπÎ≥ÑÌïú Î¨∏Ï†úÏóÜÏù¥ Í±¥Í∞ïÌï®</span>
          </button>
        </div>
      </div>
    </div>
  `;
  
  // Î™®Îã¨ ÌëúÏãú
  skinModal.style.display = 'flex';

  // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑàÎ•º Ìïú Î≤àÎßå Îì±Î°ùÌïòÎèÑÎ°ù ÏàòÏ†ï
  skinModal.removeEventListener('click', handleModalClick);
  skinModal.removeEventListener('touchstart', handleModalTouch);
  
  skinModal.addEventListener('click', handleModalClick);
  skinModal.addEventListener('touchstart', handleModalTouch);
}

// Î≥ÑÎèÑ Ìï®ÏàòÎ°ú Î∂ÑÎ¶¨
function handleModalClick(e) {
  if (e.target === e.currentTarget) {
    closeSkinTypeModal();
  }
}

function handleModalTouch(e) {
  if (e.target === e.currentTarget) {
    closeSkinTypeModal();
  }
}

  // Î™®Îã¨ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
  skinModal.addEventListener('click', function(e) {
  if (e.target === skinModal) {
    closeSkinTypeModal();
  }
});

skinModal.addEventListener('touchstart', function(e) {
  if (e.target === skinModal) {
    closeSkinTypeModal();
  }
});


// 2. ÌîºÎ∂Ä ÌÉÄÏûÖ ÏÑ†ÌÉù Ï≤òÎ¶¨ Ìï®Ïàò
function selectSkinType(type) {
  console.log('ÏÑ†ÌÉùÎêú ÌîºÎ∂Ä ÌÉÄÏûÖ:', type);
  
  // Î™®Îã¨ Îã´Í∏∞
  closeSkinTypeModal();
  
  // Î°úÎî© ÌëúÏãú
  showLoadingMessage('ÏÑ†ÌÉùÌïòÏã† ÌîºÎ∂Ä ÌÉÄÏûÖÏóê ÎßûÎäî Ï†úÌíàÏùÑ Ï∂îÏ≤úÌïòÍ≥† ÏûàÏäµÎãàÎã§...');
  
  // 1Ï¥à ÌõÑ Ï∂îÏ≤ú Í≤∞Í≥º ÌëúÏãú (ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Ìñ•ÏÉÅ)
  setTimeout(() => {
    recommendSkincare(type);
  }, 1000);
}

// 3. Î™®Îã¨ Îã´Í∏∞ Ìï®Ïàò
function closeSkinTypeModal() {
  const skinModal = document.getElementById('skin-type-modal');
  if (skinModal) {
    skinModal.style.display = 'none';
  }
}

// 4. ÌîºÎ∂Ä ÌÉÄÏûÖÎ≥Ñ Ï†úÌíà Ï∂îÏ≤ú Ìï®Ïàò
function recommendSkincare(skinType) {
  console.log('Ïä§ÌÇ®ÏºÄÏñ¥ Ï∂îÏ≤ú ÏãúÏûë:', skinType);

  // ÌîºÎ∂Ä Ï∂îÏ≤ú Ï†ÑÏö© div ÏÇ¨Ïö©
let recommendationDiv = document.getElementById('skincare-recommendation');
if (!recommendationDiv) {
  recommendationDiv = document.createElement('div');
  recommendationDiv.id = 'skincare-recommendation';
  recommendationDiv.className = 'recommendation-section';
  
  const statusDiv = document.getElementById('status');
  statusDiv.parentNode.insertBefore(recommendationDiv, statusDiv.nextSibling);
}
  
  // Ïä§ÌÇ®ÏºÄÏñ¥ Ï†úÌíà Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const skinData = skinCareProducts[skinType];
  
  if (!skinData) {
    console.error('ÌîºÎ∂Ä ÌÉÄÏûÖ Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', skinType);
    return;
  }
  
  // Ï∂îÏ≤ú ÎÇ¥Ïö© ÏÉùÏÑ±
  let html = `
    <div class="skincare-recommendation">
      <div class="skincare-header">
        <h3>${skinData.emoji} ${skinType} ÌîºÎ∂Ä ÎßûÏ∂§ Ï∂îÏ≤ú</h3>
        <p class="skincare-description">${skinData.description}</p>
      </div>
      
      <div class="products-section">
        <h4>üõçÔ∏è Ï∂îÏ≤ú Ï†úÌíà</h4>
        <div class="products-grid">
  `;
  
  // Ï†úÌíà Î™©Î°ù Ï∂îÍ∞Ä
  skinData.products.forEach((product, index) => {
    const categoryEmoji = getCategoryEmoji(product.category);
    html += `
      <div class="product-card">
        <div class="product-header">
          <span class="category-emoji">${categoryEmoji}</span>
          <div class="product-title">
            <h5>${product.name}</h5>
            <span class="product-category">${product.category}</span>
          </div>
        </div>
        <p class="product-description">${product.description}</p>
        <div class="product-details">
          <div class="product-price">üí∞ ${product.price}</div>
          <div class="product-ingredients">üß™ ${product.ingredients}</div>
        </div>
      </div>
    `;
  });
  
  html += `
        </div>
      </div>
      
      <div class="tips-section">
        <h4>üí° ${skinType} ÌîºÎ∂Ä Í¥ÄÎ¶¨ ÌåÅ</h4>
        <div class="tips-grid">
  `;
  
  // Í¥ÄÎ¶¨ ÌåÅ Ï∂îÍ∞Ä
  skinData.tips.forEach((tip, index) => {
    html += `<div class="tip-item">‚úì ${tip}</div>`;
  });
  
  html += `
        </div>
      </div>
      
      <div class="action-buttons">
        <button class="retry-btn" onclick="showSkinTypeModal()">
          üîÑ Îã§Î•∏ ÌîºÎ∂Ä ÌÉÄÏûÖ ÏÑ†ÌÉù
        </button>
        <button class="search-btn" onclick="searchProducts('${skinType}')">
          üîç Ïò®ÎùºÏù∏ÏóêÏÑú Ï†úÌíà Ï∞æÍ∏∞
        </button>
      </div>
    </div>
  `;
  
  // ÎÇ¥Ïö© ÏóÖÎç∞Ïù¥Ìä∏ Î∞è ÌëúÏãú
  recommendationDiv.innerHTML = html;
  recommendationDiv.style.display = 'block';
  
  // Ïä§ÌÅ¨Î°§ Ïù¥Îèô (Î∂ÄÎìúÎüΩÍ≤å)
  setTimeout(() => {
    recommendationDiv.scrollIntoView({ 
      behavior: 'smooth', 
      block: 'start' 
    });
  }, 100);
}

// Î≥¥Ï°∞ Ìï®ÏàòÎì§

// Î°úÎî© Î©îÏãúÏßÄ ÌëúÏãú
function showLoadingMessage(message) {
  let recommendationDiv = document.getElementById('skincare-recommendation');
  if (!recommendationDiv) {
    recommendationDiv = document.createElement('div');
    recommendationDiv.id = 'skincare-recommendation';
    const statusDiv = document.getElementById('status');
    statusDiv.parentNode.insertBefore(recommendationDiv, statusDiv.nextSibling);
  }
  
  recommendationDiv.innerHTML = `
    <div class="loading-skincare">
      <div class="loading-spinner">üîÑ</div>
      <p>${message}</p>
    </div>
  `;
  recommendationDiv.style.display = 'block';
}

// Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ïù¥Î™®ÏßÄ Î∞òÌôò
function getCategoryEmoji(category) {
  const emojiMap = {
    'ÏÑ∏ÏïàÏ†ú': 'üßº',
    'ÏÑ∏Îüº': 'üíß',
    'Î≥¥ÏäµÏ†ú': 'üß¥',
    'Ìä∏Î¶¨Ìä∏Î®ºÌä∏': 'üíä',
    'ÏÑ†ÌÅ¨Î¶º': '‚òÄÔ∏è',
    'ÎßàÏä§ÌÅ¨': 'üé≠'
  };
  return emojiMap[category] || 'üß¥';
}

// Ïø†Ìå°Í≥º Ïò¨Î¶¨Î∏åÏòÅ ÎèôÏãúÏóê Ïó¥Í∏∞
function searchProducts(skinType) {
  const coupangQuery = `${skinType} ÌîºÎ∂Ä Ïä§ÌÇ®ÏºÄÏñ¥`;
  const oliveYoungQuery = `${skinType} ÌîºÎ∂Ä Ïä§ÌÇ®ÏºÄÏñ¥`;
  
  const coupangUrl = `https://www.coupang.com/np/search?q=${encodeURIComponent(coupangQuery)}`;
  const oliveYoungUrl = `https://www.oliveyoung.co.kr/store/search/getSearchMain.do?query=${encodeURIComponent(oliveYoungQuery)}`;
  
  // Îëê ÏÇ¨Ïù¥Ìä∏Î•º ÏÉà ÌÉ≠ÏúºÎ°ú Ïó¥Í∏∞
  window.open(coupangUrl, '_blank');
  setTimeout(() => {
    window.open(oliveYoungUrl, '_blank');
  }, 500); // 0.5Ï¥à Í∞ÑÍ≤©ÏúºÎ°ú Ïó¥Í∏∞
}

// Í∏∞Ï°¥ predict Ìï®Ïàò ÏàòÏ†ï (ÌîºÎ∂Ä Î∂ÑÏÑù ÏôÑÎ£å ÌõÑ Î™®Îã¨ ÌëúÏãú)
// Ï£ºÏùò: Í∏∞Ï°¥ predict Ìï®ÏàòÎ•º Ï∞æÏïÑÏÑú Ïù¥ Î∂ÄÎ∂ÑÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî
/*
Í∏∞Ï°¥ predict Ìï®ÏàòÏóêÏÑú ÌîºÎ∂Ä Î∂ÑÏÑù ÏôÑÎ£å ÌõÑ Îã§Ïùå ÏΩîÎìú Ï∂îÍ∞Ä:

if (currentMode === 'skin') {
  // ÌîºÎ∂Ä Î∂ÑÏÑù ÏôÑÎ£å ÌõÑ ÌîºÎ∂Ä ÌÉÄÏûÖ ÏÑ†ÌÉù Î™®Îã¨ ÌëúÏãú
  setTimeout(() => {
    showSkinTypeModal();
  }, 1500); // 1.5Ï¥à ÌõÑ Î™®Îã¨ ÌëúÏãú
}
*/

// CSS Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä
const skinCareStyles = document.createElement('style');
skinCareStyles.textContent = `
  /* ÌîºÎ∂Ä ÌÉÄÏûÖ Î™®Îã¨ Ïä§ÌÉÄÏùº */
  .skin-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    align-items: center;
    justify-content: center;
    animation: fadeIn 0.3s ease-out;
  }
  
  .skin-modal-content {
    background: white;
    padding: 0;
    border-radius: 15px;
    max-width: 600px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    animation: slideInUp 0.3s ease-out;
  }
  
  .skin-modal-header {
    padding: 20px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 15px 15px 0 0;
  }
  
  .skin-modal-header h2 {
    margin: 0;
    font-size: 1.3em;
  }
  
  .close-btn {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: white;
    padding: 0;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s;
    -webkit-tap-highlight-color: transparent;
    touch-action: manipulation;
  }
  
  .close-btn:hover {
    background-color: rgba(255,255,255,0.2);
  }
  
  .skin-modal-body {
    padding: 25px;
  }
  
  .skin-modal-body p {
    text-align: center;
    color: #666;
    margin-bottom: 25px;
    line-height: 1.5;
  }
  
  .skin-type-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
    gap: 15px;
  }
  
  .skin-type-btn {
    background: white;
    border: 2px solid #e1e5e9;
    border-radius: 12px;
    padding: 20px 15px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    text-align: center;
    -webkit-tap-highlight-color: transparent;
    touch-action: manipulation;
  }
  
  .skin-type-btn:hover {
    border-color: #667eea;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
  }
  
  .skin-emoji {
    font-size: 2em;
    margin-bottom: 5px;
  }
  
  .skin-name {
    font-weight: bold;
    color: #333;
    font-size: 1em;
  }
  
  .skin-desc {
    font-size: 0.85em;
    color: #666;
    line-height: 1.3;
  }
  
  /* Ïä§ÌÇ®ÏºÄÏñ¥ Ï∂îÏ≤ú Ïä§ÌÉÄÏùº */
  .skincare-recommendation {
    background: #f8f9fa;
    border-radius: 15px;
    padding: 25px;
    margin-top: 20px;
  }
  
  .skincare-header {
    text-align: center;
    margin-bottom: 25px;
    padding-bottom: 20px;
    border-bottom: 2px solid #e1e5e9;
  }
  
  .skincare-header h3 {
    color: #333;
    margin: 0 0 10px 0;
    font-size: 1.4em;
  }
  
  .skincare-description {
    color: #666;
    margin: 0;
    font-style: italic;
  }
  
  .products-section, .tips-section {
    margin-bottom: 25px;
  }
  
  .products-section h4, .tips-section h4 {
    color: #333;
    margin-bottom: 15px;
    padding-bottom: 8px;
    border-bottom: 1px solid #e1e5e9;
  }
  
  .products-grid {
    display: grid;
    gap: 15px;
  }
  
  .product-card {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: transform 0.2s ease;
  }
  
  .product-card:hover {
    transform: translateY(-2px);
  }
  
  .product-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 12px;
  }
  
  .category-emoji {
    font-size: 1.5em;
  }
  
  .product-title h5 {
    margin: 0;
    color: #333;
    font-size: 1.1em;
  }
  
  .product-category {
    color: #666;
    font-size: 0.85em;
  }
  
  .product-description {
    color: #555;
    margin-bottom: 15px;
    line-height: 1.4;
  }
  
  .product-details {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }
  
  .product-price, .product-ingredients {
    font-size: 0.9em;
    color: #666;
  }
  
  .product-price {
    font-weight: bold;
    color: #e74c3c;
  }
  
  .tips-grid {
    display: grid;
    gap: 10px;
  }
  
  .tip-item {
    background: white;
    padding: 12px 15px;
    border-radius: 8px;
    border-left: 4px solid #667eea;
    color: #333;
  }
  
  .action-buttons {
    display: flex;
    gap: 15px;
    justify-content: center;
    margin-top: 25px;
  }
  
  .retry-btn, .search-btn {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 25px;
    cursor: pointer;
    font-weight: 500;
    transition: transform 0.2s ease;
    -webkit-tap-highlight-color: transparent;
    touch-action: manipulation;
  }
  
  .retry-btn:hover, .search-btn:hover {
    transform: translateY(-1px);
  }
  
  .search-btn {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
  }
  
  .loading-skincare {
    text-align: center;
    padding: 40px 20px;
    background: #f8f9fa;
    border-radius: 15px;
    margin-top: 20px;
  }
  
  .loading-spinner {
    font-size: 2em;
    animation: spin 1s linear infinite;
    margin-bottom: 15px;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes slideInUp {
    from { 
      opacity: 0;
      transform: translateY(30px);
    }
    to { 
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Î™®Î∞îÏùº Î∞òÏùëÌòï */
  @media (max-width: 768px) {
    .skin-modal-content {
      width: 95%;
      margin: 10px;
    }
    
    .skin-type-grid {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .action-buttons {
      flex-direction: column;
    }
    
    .products-grid {
      gap: 12px;
    }
    
    .product-card {
      padding: 15px;
    }
  }
`;

// Ïä§ÌÉÄÏùºÏùÑ headÏóê Ï∂îÍ∞Ä
document.head.appendChild(skinCareStyles);

// Ï†ÑÏó≠ Ìï®ÏàòÎ°ú Îì±Î°ù
window.closeSkinTypeModal = closeSkinTypeModal;
window.selectSkinType = selectSkinType;
window.showSkinTypeModal = showSkinTypeModal;
window.searchProducts = searchProducts;

const fixStyle = document.createElement('style');
fixStyle.textContent = `
  * {
    touch-action: manipulation;
  }
  
  button, .music-item, .prediction-item {
    pointer-events: auto !important;
    cursor: pointer !important;
    user-select: none;
  }
  
  .music-item:hover, button:hover {
    opacity: 0.8;
  }
`;
document.head.appendChild(fixStyle);
