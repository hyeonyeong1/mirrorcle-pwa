// PWA Í¥ÄÎ†® Î≥ÄÏàò
let deferredPrompt;
let isInstalled = false;

// Ïï± Í¥ÄÎ†® Î≥ÄÏàò
const MODELS = {
  emotion: "https://teachablemachine.withgoogle.com/models/_Yn5oTjFE/",
  skin: "https://teachablemachine.withgoogle.com/models/Zd0FUwzdG/"
};

let currentMode = null;
let model, webcam, maxPredictions;
let emotionDetected = false;
let animationId;
let detectionActive = false;
let countdownInterval;
let timeLeft = 5;

// YouTube API ÌÇ§ (Ïã§Ï†ú ÏÇ¨Ïö©ÏãúÏóêÎäî Î≥∏Ïù∏Ïùò API ÌÇ§Î°ú ÍµêÏ≤¥ ÌïÑÏöî)
const YOUTUBE_API_KEY = 'YOUTUBE_API_KEY';

// Í∞êÏ†ïÎ≥Ñ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ Í≤ÄÏÉâ ÌÇ§ÏõåÎìú
const musicKeywords = {
  'ÌñâÎ≥µÌïú ÌëúÏ†ï': ['Ïã†ÎÇòÎäî ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏'], 
  'Ïä¨ÌîàÌëúÏ†ï': ['Í∞êÏÑ± ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏'], 
  'Î¨¥ÌëúÏ†ï': ['Î©úÎ°† 100']
};

// Í∞êÏ†ïÎ≥Ñ Ïù¥Î™®ÏßÄ Îß§Ìïë
const emotionEmojis = {
  'ÌñâÎ≥µÌïú ÌëúÏ†ï': 'üòä', 
  'Ïä¨ÌîàÌëúÏ†ï': 'üò¢', 
  'Î¨¥ÌëúÏ†ï': 'üòê'
};

// ÌîºÎ∂Ä ÏÉÅÌÉúÎ≥Ñ Ïù¥Î™®ÏßÄ Îß§Ìïë
const skinEmojis = {
  'Good': '‚ú®', 'Normal': 'üòä', 'Dry': 'üåµ', 'Oily': 'üíß',
  'Acne': 'üî¥', 'Sensitive': 'üå∏',
  'Ìä∏Îü¨Î∏î': 'üòî', 'Ï†ïÏÉÅ ÌîºÎ∂Ä': 'üòä', 'ÌôîÎ©¥Ïóê ÏñºÍµ¥ÏùÑ Í∞ÄÍπåÏù¥ Ìï¥Ï£ºÏÑ∏Ïöî': 'üì∑',
  'ÌïôÏäµÏÑ± Ïó¨ÎìúÎ¶Ñ': 'üò∞', 'Í±¥ÏÑ±': 'üåµ', 'ÏßÄÏÑ±': 'üíß', 'ÎØºÍ∞êÏÑ±': 'üå∏',
  'Class 1': '‚ú®', 'Class 2': 'üòä', 'Class 3': 'üòî',
  'Class 4': 'üíß', 'Class 5': 'üî¥', 'Class 6': 'üå∏'
};

// PWA Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', function() {
  initPWA();
  checkURLParams();
});

// PWA Í∏∞Îä• Ï¥àÍ∏∞Ìôî
async function initPWA() {
  // Service Worker Îì±Î°ù
  if ('serviceWorker' in navigator) {
    try {
      const registration = await navigator.serviceWorker.register('/sw.js');
      console.log('Service Worker Îì±Î°ù ÏÑ±Í≥µ:', registration.scope);
      
      // ÏóÖÎç∞Ïù¥Ìä∏ ÌôïÏù∏
      registration.addEventListener('updatefound', () => {
        const newWorker = registration.installing;
        newWorker.addEventListener('statechange', () => {
          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
            // ÏÉà Î≤ÑÏ†ÑÏù¥ ÏÑ§ÏπòÎê®
            showUpdateNotification();
          }
        });
      });
      
    } catch (error) {
      console.error('Service Worker Îì±Î°ù Ïã§Ìå®:', error);
    }
  }
  
  // ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ Ï≤òÎ¶¨
  window.addEventListener('beforeinstallprompt', (e) => {
    console.log('ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ Ïù¥Î≤§Ìä∏ Î∞úÏÉù');
    e.preventDefault();
    deferredPrompt = e;
    showInstallPrompt();
  });
  
  // Ïï± ÏÑ§Ïπò ÏôÑÎ£å Í∞êÏßÄ
  window.addEventListener('appinstalled', (e) => {
    console.log('Ïï± ÏÑ§Ïπò ÏôÑÎ£å');
    isInstalled = true;
    hideInstallPrompt();
    showToast('MirrorcleÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÑ§ÏπòÎêòÏóàÏäµÎãàÎã§! üéâ');
  });
  
  // Ïù¥ÎØ∏ ÏÑ§ÏπòÎêú ÏÉÅÌÉúÏù∏ÏßÄ ÌôïÏù∏
  if (window.matchMedia('(display-mode: standalone)').matches) {
    isInstalled = true;
    console.log('Ïù¥ÎØ∏ ÏÑ§ÏπòÎêú ÏÉÅÌÉúÎ°ú Ïã§Ìñâ Ï§ë');
  }
}

// URL ÌååÎùºÎØ∏ÌÑ∞ ÌôïÏù∏ (Î∞îÎ°úÍ∞ÄÍ∏∞ ÎßÅÌÅ¨ Ï≤òÎ¶¨)
function checkURLParams() {
  const urlParams = new URLSearchParams(window.location.search);
  const mode = urlParams.get('mode');
  
  if (mode && (mode === 'emotion' || mode === 'skin')) {
    selectMode(mode);
  }
}

// ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ ÌëúÏãú
function showInstallPrompt() {
  if (!isInstalled) {
    const installPrompt = document.getElementById('installPrompt');
    installPrompt.classList.add('show');
    
    document.getElementById('installBtn').addEventListener('click', installApp);
  }
}

// ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ Ïà®Í∏∞Í∏∞
function hideInstallPrompt() {
  const installPrompt = document.getElementById('installPrompt');
  installPrompt.classList.remove('show');
  localStorage.setItem('installPromptHidden', 'true');
}

// Ïï± ÏÑ§Ïπò
async function installApp() {
  if (deferredPrompt) {
    try {
      deferredPrompt.prompt();
      const { outcome } = await deferredPrompt.userChoice;
      
      if (outcome === 'accepted') {
        console.log('ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ§ÏπòÎ•º ÏäπÏù∏ÌñàÏäµÎãàÎã§');
      } else {
        console.log('ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ§ÏπòÎ•º Í±∞Î∂ÄÌñàÏäµÎãàÎã§');
      }
      
      deferredPrompt = null;
      hideInstallPrompt();
    } catch (error) {
      console.error('ÏÑ§Ïπò Ï§ë Ïò§Î•ò:', error);
      // iOS SafariÏùò Í≤ΩÏö∞ ÏàòÎèô ÏÑ§Ïπò ÏïàÎÇ¥
      if (navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome')) {
        showIOSInstallGuide();
      }
    }
  } else {
    // iOS SafariÏùò Í≤ΩÏö∞ ÏàòÎèô ÏÑ§Ïπò ÏïàÎÇ¥
    if (navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome')) {
      showIOSInstallGuide();
    }
  }
}

// iOS ÏÑ§Ïπò Í∞ÄÏù¥Îìú ÌëúÏãú
function showIOSInstallGuide() {
  const guide = `
    iOSÏóêÏÑú Ïï±ÏúºÎ°ú ÏÑ§ÏπòÌïòÍ∏∞:
    1. ÌôîÎ©¥ ÌïòÎã®Ïùò Í≥µÏú† Î≤ÑÌäº(üì§)ÏùÑ ÌÉ≠ÌïòÏÑ∏Ïöî
    2. "Ìôà ÌôîÎ©¥Ïóê Ï∂îÍ∞Ä"Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî
    3. "Ï∂îÍ∞Ä"Î•º ÌÉ≠ÌïòÏó¨ ÏÑ§ÏπòÎ•º ÏôÑÎ£åÌïòÏÑ∏Ïöî
  `;
  
  alert(guide);
}

// ÏóÖÎç∞Ïù¥Ìä∏ ÏïåÎ¶º ÌëúÏãú
function showUpdateNotification() {
  if (confirm('ÏÉàÎ°úÏö¥ Î≤ÑÏ†ÑÏù¥ ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
    window.location.reload();
  }
}

// ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ ÌëúÏãú
function showToast(message) {
  const toast = document.createElement('div');
  toast.style.cssText = `
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: #4CAF50;
    color: white;
    padding: 15px 25px;
    border-radius: 25px;
    z-index: 10000;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    animation: slideInDown 0.3s ease-out;
  `;
  toast.textContent = message;
  
  document.body.appendChild(toast);
  
  setTimeout(() => {
    toast.style.animation = 'slideOutUp 0.3s ease-in';
    setTimeout(() => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }, 300);
  }, 3000);
}

// Î™®Îìú ÏÑ†ÌÉù Ìï®Ïàò
function selectMode(mode) {
  currentMode = mode;
  document.getElementById('mode-selection').style.display = 'none';
  document.getElementById('main-content').style.display = 'block';
  
  if (mode === 'emotion') {
    document.getElementById('mode-title').innerHTML = 'üòä ÌëúÏ†ï Í∞êÏ†ï Ïù∏Ïãù';
    document.getElementById('startBtn').innerText = 'Í∞êÏ†ï Ïù∏Ïãù ÏãúÏûë';
  } else if (mode === 'skin') {
    document.getElementById('mode-title').innerHTML = '‚ú® ÌîºÎ∂Ä ÏÉÅÌÉú Î∂ÑÏÑù';
    document.getElementById('startBtn').innerText = 'ÌîºÎ∂Ä Î∂ÑÏÑù ÏãúÏûë';
  }
  
  init();
}

// Îí§Î°úÍ∞ÄÍ∏∞ Ìï®Ïàò
function goBack() {
  if (webcam) {
    webcam.stop();
  }
  if (countdownInterval) {
    clearInterval(countdownInterval);
  }
  
  document.getElementById('main-content').style.display = 'none';
  document.getElementById('mode-selection').style.display = 'block';
  
  currentMode = null;
  model = null;
  webcam = null;
  emotionDetected = false;
  detectionActive = false;
  
  const container = document.getElementById('webcam-container');
  container.innerHTML = '';
}

// Ï¥àÍ∏∞Ìôî Ìï®Ïàò
async function init() {
  const statusDiv = document.getElementById('status');
  
  try {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      throw new Error('ÏõπÏ∫†Ïù¥ ÏßÄÏõêÎêòÏßÄ ÏïäÎäî Î∏åÎùºÏö∞Ï†ÄÏûÖÎãàÎã§.');
    }

    statusDiv.innerHTML = 'ü§ñ AI Î™®Îç∏ Î°úÎî© Ï§ë...';
    
    const modelURL = MODELS[currentMode] + "model.json";
    const metadataURL = MODELS[currentMode] + "metadata.json";
    
    model = await tmImage.load(modelURL, metadataURL);
    maxPredictions = model.getTotalClasses();
    
    statusDiv.innerHTML = 'üì∑ ÏõπÏ∫† ÏÑ§Ï†ï Ï§ë...';
    
    const flip = true;
    webcam = new tmImage.Webcam(400, 400, flip);
    await webcam.setup();
    await webcam.play();
    
    document.getElementById("webcam-container").appendChild(webcam.canvas);
    
    const modeText = currentMode === 'emotion' ? 'Í∞êÏ†ï Ïù∏Ïãù' : 'ÌîºÎ∂Ä Î∂ÑÏÑù';
    statusDiv.innerHTML = `‚úÖ Ï§ÄÎπÑ ÏôÑÎ£å! Î≤ÑÌäºÏùÑ ÎàåÎü¨ ${modeText}ÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî.`;
    statusDiv.className = 'success';
    
    document.getElementById('startBtn').disabled = false;
    
    loop();
    
  } catch (error) {
    console.error('Ï¥àÍ∏∞Ìôî Ïò§Î•ò:', error);
    statusDiv.innerHTML = `‚ùå Ïò§Î•ò: ${error.message}`;
    statusDiv.className = 'error';
    
    if (error.name === 'NotAllowedError' || error.message.includes('Permission')) {
      const retryBtn = document.createElement('button');
      retryBtn.innerText = 'ÏõπÏ∫† Í∂åÌïú ÌóàÏö©ÌïòÍ≥† Ïû¨ÏãúÎèÑ';
      retryBtn.onclick = () => location.reload();
      document.getElementById('controls').appendChild(retryBtn);
    }
  }
}

// Î£®ÌîÑ Ìï®Ïàò
async function loop() {
  if (webcam) {
    webcam.update();
    await predict();
    requestAnimationFrame(loop);
  }
}

// ÏòàÏ∏° Ìï®Ïàò
async function predict() {
  if (!model || !webcam) return;
  
  try {
    const prediction = await model.predict(webcam.canvas);
    
    updatePredictionDisplay(prediction);
    
    if (detectionActive && !emotionDetected) {
      const topPrediction = prediction.reduce((a, b) => 
        a.probability > b.probability ? a : b
      );
      
      if (topPrediction.probability > 0.6) {
        emotionDetected = true;
        detectionActive = false;
        clearInterval(countdownInterval);
        
        const emojiMap = currentMode === 'emotion' ? emotionEmojis : skinEmojis;
        const emoji = emojiMap[topPrediction.className] || 'ü§î';
        const modeText = currentMode === 'emotion' ? 'Í∞êÏ†ï Ïù∏Ïãù' : 'ÌîºÎ∂Ä Î∂ÑÏÑù';
        
        document.getElementById('status').innerHTML = 
          `‚úÖ ${modeText} ÏÑ±Í≥µ!<br>${emoji} ${topPrediction.className} (${Math.round(topPrediction.probability * 100)}%)`;
        document.getElementById('status').className = 'success';
        
        if (currentMode === 'emotion') {
          recommendMusic(topPrediction.className);
        }
        
        showRestartButton();
      }
    }
    
  } catch (error) {
    console.error('ÏòàÏ∏° Ïò§Î•ò:', error);
  }
}

// ÏòàÏ∏° Í≤∞Í≥º ÌëúÏãú Ìï®Ïàò
function updatePredictionDisplay(predictions) {
  const predictionList = document.getElementById('prediction-list');
  const predictionsDiv = document.getElementById('predictions');
  
  if (!detectionActive) {
    predictionsDiv.style.display = 'block';
  }
  
  predictionList.innerHTML = '';
  
  const emojiMap = currentMode === 'emotion' ? emotionEmojis : skinEmojis;
  
  predictions
    .sort((a, b) => b.probability - a.probability)
    .forEach(pred => {
      const item = document.createElement('div');
      item.className = 'prediction-item';
      
      const emoji = emojiMap[pred.className] || 'ü§î';
      const percentage = Math.round(pred.probability * 100);
      
      item.innerHTML = `
        <span>${emoji} ${pred.className}</span>
        <div class="prediction-bar">
          <div class="prediction-fill" style="width: ${percentage}%"></div>
        </div>
        <span>${percentage}%</span>
      `;
      
      predictionList.appendChild(item);
    });
}

// Í∞êÏßÄ ÏãúÏûë Ìï®Ïàò
function startDetection() {
  if (emotionDetected) {
    restart();
    return;
  }
  
  detectionActive = true;
  emotionDetected = false;
  timeLeft = 5;
  
  document.getElementById('startBtn').disabled = true;
  document.getElementById('predictions').style.display = 'none';
  
  const modeText = currentMode === 'emotion' ? 'Í∞êÏ†ï Î∂ÑÏÑù' : 'ÌîºÎ∂Ä Î∂ÑÏÑù';
  const instructionText = currentMode === 'emotion' ? 
    'Ïπ¥Î©îÎùºÎ•º Î≥¥Í≥† ÌëúÏ†ïÏùÑ ÏßÄÏñ¥Ï£ºÏÑ∏Ïöî!' : 
    'Ïπ¥Î©îÎùºÎ•º Î≥¥Í≥† ÏñºÍµ¥ÏùÑ Ï†ïÎ©¥ÏúºÎ°ú ÎßûÏ∂∞Ï£ºÏÑ∏Ïöî!';
  
  countdownInterval = setInterval(() => {
    if (detectionActive && timeLeft > 0) {
      document.getElementById('status').innerHTML = 
        `üîç ${modeText} Ï§ë... (${timeLeft}Ï¥à ÎÇ®Ïùå)<br>${instructionText}`;
      document.getElementById('status').className = '';
      timeLeft--;
    } else if (detectionActive) {
      detectionActive = false;
      emotionDetected = false;
      clearInterval(countdownInterval);
      
      document.getElementById('status').innerHTML = 
        `‚ùå ${modeText} Ïã§Ìå® (5Ï¥à Ï¥àÍ≥º)<br>Îçî Î™ÖÌôïÌïòÍ≤å ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî!`;
      document.getElementById('status').className = 'error';
      
      showRestartButton();
    }
  }, 1000);
  
  setTimeout(() => {
    if (detectionActive && !emotionDetected) {
      detectionActive = false;
      clearInterval(countdownInterval);
      
      const modeText = currentMode === 'emotion' ? 'Í∞êÏ†ï Ïù∏Ïãù' : 'ÌîºÎ∂Ä Î∂ÑÏÑù';
      document.getElementById('status').innerHTML = 
        `‚ùå ${modeText} Ïã§Ìå® (5Ï¥à Ï¥àÍ≥º)<br>Îçî Î™ÖÌôïÌïòÍ≤å ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî!`;
      document.getElementById('status').className = 'error';
      
      showRestartButton();
    }
  }, 5000);
}

// Ïû¨ÏãúÏûë Î≤ÑÌäº ÌëúÏãú Ìï®Ïàò
function showRestartButton() {
  document.getElementById('startBtn').style.display = 'none';
  document.getElementById('restartBtn').style.display = 'inline-block';
  document.getElementById('predictions').style.display = 'block';
}

// Ïû¨ÏãúÏûë Ìï®Ïàò
function restart() {
  detectionActive = false;
  emotionDetected = false;
  clearInterval(countdownInterval);
  
  const modeText = currentMode === 'emotion' ? 'Í∞êÏ†ï Ïù∏Ïãù' : 'ÌîºÎ∂Ä Î∂ÑÏÑù';
  document.getElementById('status').innerHTML = 
    `‚úÖ Ï§ÄÎπÑ ÏôÑÎ£å! Î≤ÑÌäºÏùÑ ÎàåÎü¨ ${modeText}ÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî.`;
  document.getElementById('status').className = 'success';
  
  document.getElementById('startBtn').style.display = 'inline-block';
  document.getElementById('startBtn').disabled = false;
  document.getElementById('restartBtn').style.display = 'none';
  document.getElementById('predictions').style.display = 'block';
  
  document.getElementById('music-recommendation').style.display = 'none';
}

// YouTube ÏùåÏïÖ Ï∂îÏ≤ú Ìï®Ïàò
async function recommendMusic(emotion) {
  const musicDiv = document.getElementById('music-recommendation');
  const musicContent = document.getElementById('music-content');
  
  musicDiv.style.display = 'block';
  musicContent.innerHTML = '<div class="loading-music">üéµ ÎãπÏã†Ïùò Í∏∞Î∂ÑÏóê ÎßûÎäî ÏùåÏïÖÏùÑ Ï∞æÍ≥† ÏûàÏäµÎãàÎã§...</div>';
  
  try {
    if (YOUTUBE_API_KEY === 'YOUR_YOUTUBE_API_KEY') {
      showDummyMusic(emotion);
      return;
    }
    
    const keywords = musicKeywords[emotion];
    if (!keywords) {
      console.log('Í∞êÏ†ïÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå:', emotion);
      showDummyMusic(emotion);
      return;
    }
    
    const randomKeyword = keywords[Math.floor(Math.random() * keywords.length)];
    console.log('ÏÑ†ÌÉùÎêú Í∞êÏ†ï:', emotion, 'Í≤ÄÏÉâ ÌÇ§ÏõåÎìú:', randomKeyword);
    
    const response = await fetch(
      `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(randomKeyword)}&type=video&videoDuration=long&maxResults=6&key=${YOUTUBE_API_KEY}`
    );
    
    if (!response.ok) {
      throw new Error('YouTube API Ìò∏Ï∂ú Ïã§Ìå®');
    }
    
    const data = await response.json();
    displayMusic(data.items, emotion);
    
  } catch (error) {
    console.error('ÏùåÏïÖ Ï∂îÏ≤ú Ïò§Î•ò:', error);
    showDummyMusic(emotion);
  }
}

// Ïã§Ï†ú YouTube Îç∞Ïù¥ÌÑ∞ ÌëúÏãú
function displayMusic(videos, emotion) {
  const musicContent = document.getElementById('music-content');
  const emotionText = getEmotionText(emotion);
  
  let html = `<p style="text-align: center; margin-bottom: 15px; color: #666;">
    ${emotionText} Í∏∞Î∂ÑÏóê Ïñ¥Ïö∏Î¶¨Îäî ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏Î•º Ï∂îÏ≤úÌï¥ÎìúÎ†§Ïöî! üéµ
  </p><div class="music-grid">`;
  
  videos.forEach(video => {
    html += `
      <div class="music-item" onclick="playYouTubeVideo('${video.id.videoId}')">
        <img src="${video.snippet.thumbnails.medium.url}" alt="${video.snippet.title}" class="music-thumbnail">
        <div class="music-info">
          <div class="music-title-text">${video.snippet.title}</div>
          <div class="music-channel">${video.snippet.channelTitle}</div>
          <button class="play-button" onclick="event.stopPropagation(); playYouTubeVideo('${video.id.videoId}')">
            ‚ñ∂Ô∏è Ïû¨ÏÉù
          </button>
        </div>
      </div>
    `;
  });
  
  html += '</div>';
  musicContent.innerHTML = html;
}

// ÎçîÎØ∏ ÏùåÏïÖ Îç∞Ïù¥ÌÑ∞ ÌëúÏãú (API ÌÇ§Í∞Ä ÏóÜÏùÑ Îïå)
function showDummyMusic(emotion) {
  const musicContent = document.getElementById('music-content');
  const emotionText = getEmotionText(emotion);
  
  console.log('ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÌëúÏãú - Í∞êÏ†ï:', emotion, 'Í∞êÏ†ï ÌÖçÏä§Ìä∏:', emotionText);
  
  const dummyVideos = getDummyMusicData(emotion);
  console.log('ÏÑ†ÌÉùÎêú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞:', dummyVideos);
  
  let html = `<p style="text-align: center; margin-bottom: 15px; color: #666;">
    ${emotionText} Í∏∞Î∂ÑÏóê Ïñ¥Ïö∏Î¶¨Îäî ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏Î•º Ï∂îÏ≤úÌï¥ÎìúÎ†§Ïöî! üéµ<br>
    <small style="color: #999;">(YouTube API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïÑ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Î•º ÌëúÏãúÌï©ÎãàÎã§)</small>
  </p><div class="music-grid">`;
  
  dummyVideos.forEach(video => {
    html += `
      <div class="music-item" onclick="searchYouTube('${video.title}')">
        <img src="/api/placeholder/240/135" alt="${video.title}" class="music-thumbnail">
        <div class="music-info">
          <div class="music-title-text">${video.title}</div>
          <div class="music-channel">${video.artist}</div>
          <button class="play-button" onclick="event.stopPropagation(); searchYouTube('${video.title}')">
            üîç YouTubeÏóêÏÑú Ï∞æÍ∏∞
          </button>
        </div>
      </div>
    `;
  });
  
  html += '</div>';
  musicContent.innerHTML = html;
}

// Í∞êÏ†ïÏóê Îî∞Î•∏ Ï∞®Î≥ÑÌôîÎêú ÎçîÎØ∏ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ - ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ
function getDummyMusicData(emotion) {
  console.log('getDummyMusicData Ìò∏Ï∂úÎê® - Í∞êÏ†ï:', emotion);
  
  // Í∞êÏ†ï Í∞í Ï†ïÍ∑úÌôî (Í≥µÎ∞±, ÎåÄÏÜåÎ¨∏Ïûê Ï≤òÎ¶¨)
  const normalizedEmotion = emotion.trim().toLowerCase();
  
  const playlistData = {
    // Îã§ÏñëÌïú ÌòïÌÉúÏùò ÌñâÎ≥µÌïú Í∞êÏ†ï ÌÇ§Îì§
    'ÌñâÎ≥µÌïú ÌëúÏ†ï': [
      { title: '[Ïã†ÎÇòÎäî ÏùåÏïÖ] ÎìúÎùºÏù¥Î∏åÌï† Îïå Îì£Í∏∞ Ï¢ãÏùÄ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Music Playlist' },
      { title: 'Ïã†ÎÇòÎäî ÌåùÏÜ° Î™®Ïùå | Í∏∞Î∂Ñ Ï¢ãÏïÑÏßÄÎäî ÎÖ∏Îûò ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Pop Music' },
      { title: 'ÎåÑÏä§ ÎÆ§ÏßÅ Î≤†Ïä§Ìä∏ | ÌååÌã∞ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ Ïã†ÎÇòÎäî ÏùåÏïÖ', artist: 'Dance Hits' },
      { title: 'Ïã†ÎÇòÎäî K-POP ÎåÑÏä§Í≥° Î™®Ïùå | Ïö¥ÎèôÌï† Îïå Îì£Îäî ÎÖ∏Îûò', artist: 'K-Pop Dance' },
      { title: 'Ïã†ÎÇòÎäî EDM ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ | ÌÅ¥ÎüΩ ÎÆ§ÏßÅ Î≤†Ïä§Ìä∏', artist: 'EDM Hits' },
      { title: 'Í∏∞Î∂Ñ Ï¢ãÏïÑÏßÄÎäî Ïã†ÎÇòÎäî ÏùåÏïÖ Î™®ÏùåÏßë', artist: 'Feel Good Music' }
    ],
    'happy': [
      { title: '[Ïã†ÎÇòÎäî ÏùåÏïÖ] ÎìúÎùºÏù¥Î∏åÌï† Îïå Îì£Í∏∞ Ï¢ãÏùÄ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Music Playlist' },
      { title: 'Ïã†ÎÇòÎäî ÌåùÏÜ° Î™®Ïùå | Í∏∞Î∂Ñ Ï¢ãÏïÑÏßÄÎäî ÎÖ∏Îûò ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Pop Music' },
      { title: 'ÎåÑÏä§ ÎÆ§ÏßÅ Î≤†Ïä§Ìä∏ | ÌååÌã∞ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ Ïã†ÎÇòÎäî ÏùåÏïÖ', artist: 'Dance Hits' },
      { title: 'Ïã†ÎÇòÎäî K-POP ÎåÑÏä§Í≥° Î™®Ïùå | Ïö¥ÎèôÌï† Îïå Îì£Îäî ÎÖ∏Îûò', artist: 'K-Pop Dance' },
      { title: 'Ïã†ÎÇòÎäî EDM ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ | ÌÅ¥ÎüΩ ÎÆ§ÏßÅ Î≤†Ïä§Ìä∏', artist: 'EDM Hits' },
      { title: 'Í∏∞Î∂Ñ Ï¢ãÏïÑÏßÄÎäî Ïã†ÎÇòÎäî ÏùåÏïÖ Î™®ÏùåÏßë', artist: 'Feel Good Music' }
    ],
    
    // Îã§ÏñëÌïú ÌòïÌÉúÏùò Ïä¨Ìîà Í∞êÏ†ï ÌÇ§Îì§
    'Ïä¨ÌîàÌëúÏ†ï': [
      { title: 'Í∞êÏÑ± Î∞úÎùºÎìú Î™®Ïùå | Î∞§Ïóê Îì£Í∏∞ Ï¢ãÏùÄ Ïä¨Ìîà ÎÖ∏Îûò', artist: 'Ballad Collection' },
      { title: 'Í∞êÏÑ± ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ | Ïö∞Ïö∏Ìï† Îïå Îì£Îäî ÏùåÏïÖ Î™®Ïùå', artist: 'Emotional Music' },
      { title: 'Ïù¥Î≥Ñ ÎÖ∏Îûò Î™®Ïùå | Ïä¨Ìîà Í∞êÏÑ± Î∞úÎùºÎìú ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Breakup Songs' },
      { title: 'Í∞êÏÑ± Ïù∏Îîî ÏùåÏïÖ | ÌòºÏûê ÏûàÏùÑ Îïå Îì£Îäî ÎÖ∏Îûò', artist: 'Indie Emotional' },
      { title: 'ÎπÑ Ïò§Îäî ÎÇ† Îì£Í∏∞ Ï¢ãÏùÄ Í∞êÏÑ± ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Rainy Day Music' },
      { title: 'Í∞êÏÑ± R&B Î™®Ïùå | ÍπäÏùÄ Î∞§ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'R&B Emotional' }
    ],
    'sad': [
      { title: 'Í∞êÏÑ± Î∞úÎùºÎìú Î™®Ïùå | Î∞§Ïóê Îì£Í∏∞ Ï¢ãÏùÄ Ïä¨Ìîà ÎÖ∏Îûò', artist: 'Ballad Collection' },
      { title: 'Í∞êÏÑ± ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ | Ïö∞Ïö∏Ìï† Îïå Îì£Îäî ÏùåÏïÖ Î™®Ïùå', artist: 'Emotional Music' },
      { title: 'Ïù¥Î≥Ñ ÎÖ∏Îûò Î™®Ïùå | Ïä¨Ìîà Í∞êÏÑ± Î∞úÎùºÎìú ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Breakup Songs' },
      { title: 'Í∞êÏÑ± Ïù∏Îîî ÏùåÏïÖ | ÌòºÏûê ÏûàÏùÑ Îïå Îì£Îäî ÎÖ∏Îûò', artist: 'Indie Emotional' },
      { title: 'ÎπÑ Ïò§Îäî ÎÇ† Îì£Í∏∞ Ï¢ãÏùÄ Í∞êÏÑ± ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'Rainy Day Music' },
      { title: 'Í∞êÏÑ± R&B Î™®Ïùå | ÍπäÏùÄ Î∞§ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', artist: 'R&B Emotional' }
    ],
    
    // Îã§ÏñëÌïú ÌòïÌÉúÏùò Î¨¥ÌëúÏ†ï/Ï§ëÎ¶Ω Í∞êÏ†ï ÌÇ§Îì§
    'Î¨¥ÌëúÏ†ï': [
      { title: 'Î©úÎ°† Ï∞®Ìä∏ TOP 100 | ÏµúÏã† Ïù∏Í∏∞Í≥° Î™®Ïùå', artist: 'Melon Chart' },
      { title: '2024 Î©úÎ°† Ïó∞Í∞ÑÏ∞®Ìä∏ Î≤†Ïä§Ìä∏ 100', artist: 'Melon Annual Chart' },
      { title: 'Î©úÎ°† Ïã§ÏãúÍ∞Ñ Ï∞®Ìä∏ 1ÏúÑ~100ÏúÑ ÎÖºÏä§ÌÜ±', artist: 'Melon Real-time' },
      { title: 'Î©úÎ°† HOT 100 | ÏßÄÍ∏à Í∞ÄÏû• Ïù∏Í∏∞ÏûàÎäî ÎÖ∏Îûò', artist: 'Melon Hot 100' },
      { title: 'Î©úÎ°†Ï∞®Ìä∏ Ïù∏Í∏∞Í≥° Î™®Ïùå | K-POP ÌûàÌä∏ÏÜ°', artist: 'Melon K-Pop Hits' },
      { title: 'Î©úÎ°† ÏõîÍ∞ÑÏ∞®Ìä∏ TOP 100 Î≤†Ïä§Ìä∏', artist: 'Melon Monthly Chart' }
    ],
    'neutral': [
      { title: 'Î©úÎ°† Ï∞®Ìä∏ TOP 100 | ÏµúÏã† Ïù∏Í∏∞Í≥° Î™®Ïùå', artist: 'Melon Chart' },
      { title: '2024 Î©úÎ°† Ïó∞Í∞ÑÏ∞®Ìä∏ Î≤†Ïä§Ìä∏ 100', artist: 'Melon Annual Chart' },
      { title: 'Î©úÎ°† Ïã§ÏãúÍ∞Ñ Ï∞®Ìä∏ 1ÏúÑ~100ÏúÑ ÎÖºÏä§ÌÜ±', artist: 'Melon Real-time' },
      { title: 'Î©úÎ°† HOT 100 | ÏßÄÍ∏à Í∞ÄÏû• Ïù∏Í∏∞ÏûàÎäî ÎÖ∏Îûò', artist: 'Melon Hot 100' },
      { title: 'Î©úÎ°†Ï∞®Ìä∏ Ïù∏Í∏∞Í≥° Î™®Ïùå | K-POP ÌûàÌä∏ÏÜ°', artist: 'Melon K-Pop Hits' },
      { title: 'Î©úÎ°† ÏõîÍ∞ÑÏ∞®Ìä∏ TOP 100 Î≤†Ïä§Ìä∏', artist: 'Melon Monthly Chart' }
    ]
  };
  
  // Î®ºÏ†Ä Ï†ïÌôïÌïú Îß§Ïπ≠ÏùÑ ÏãúÎèÑ
  let result = playlistData[emotion];
  
  // Ï†ïÌôïÌïú Îß§Ïπ≠Ïù¥ ÏóÜÏúºÎ©¥ Ï†ïÍ∑úÌôîÎêú ÌÇ§Î°ú Îß§Ïπ≠ ÏãúÎèÑ
  if (!result) {
    result = playlistData[normalizedEmotion];
  }
  
  // Ïó¨Ï†ÑÌûà Îß§Ïπ≠ÎêòÏßÄ ÏïäÏúºÎ©¥ Í∞êÏ†ï ÌÇ§ÏõåÎìúÎ•º Ìè¨Ìï®ÌïòÎäîÏßÄ ÌôïÏù∏
  if (!result) {
    if (normalizedEmotion.includes('ÌñâÎ≥µ') || normalizedEmotion.includes('happy') || normalizedEmotion.includes('joy')) {
      result = playlistData['ÌñâÎ≥µÌïú ÌëúÏ†ï'];
    } else if (normalizedEmotion.includes('Ïä¨Ìîà') || normalizedEmotion.includes('sad') || normalizedEmotion.includes('Ïö∞Ïö∏')) {
      result = playlistData['Ïä¨ÌîàÌëúÏ†ï'];
    } else {
      result = playlistData['Î¨¥ÌëúÏ†ï']; // Í∏∞Î≥∏Í∞í
    }
  }
  
  console.log('Î∞õÏùÄ Í∞êÏ†ï Í∞í:', emotion);
  console.log('Ï†ïÍ∑úÌôîÎêú Í∞êÏ†ï Í∞í:', normalizedEmotion);
  console.log('Îß§Ïπ≠Îêú ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ Í∏∏Ïù¥:', result?.length);
  console.log('Î∞òÌôòÎêòÎäî ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ Ï≤´ Î≤àÏß∏ Ìï≠Î™©:', result?.[0]);
  
  return result;
}

// Í∞êÏ†ï ÌÖçÏä§Ìä∏ Î≥ÄÌôò - Îçî Ïú†Ïó∞Ìïú Îß§Ïπ≠
function getEmotionText(emotion) {
  const normalizedEmotion = emotion.trim().toLowerCase();
  
  if (normalizedEmotion.includes('ÌñâÎ≥µ') || normalizedEmotion.includes('happy') || normalizedEmotion.includes('joy')) {
    return 'ÌñâÎ≥µÌïú';
  } else if (normalizedEmotion.includes('Ïä¨Ìîà') || normalizedEmotion.includes('sad') || normalizedEmotion.includes('Ïö∞Ïö∏')) {
    return 'Ïä¨Ìîà';
  } else {
    return 'Ï∞®Î∂ÑÌïú';
  }
}

// YouTube ÎèôÏòÅÏÉÅ Ïû¨ÏÉù (ÏÉà ÌÉ≠ÏóêÏÑú)
function playYouTubeVideo(videoId) {
  window.open(`https://www.youtube.com/watch?v=${videoId}`, '_blank');
}

// YouTube Í≤ÄÏÉâ (ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Ïö©)
function searchYouTube(query) {
  window.open(`https://www.youtube.com/results?search_query=${encodeURIComponent(query)}`, '_blank');
}

// Ï¢ÖÎ£å Ïãú Ï†ïÎ¶¨
window.addEventListener("beforeunload", () => {
  if (webcam) {
    webcam.stop();
  }
  if (countdownInterval) {
    clearInterval(countdownInterval);
  }
});

// CSS Ïï†ÎãàÎ©îÏù¥ÏÖò Ï∂îÍ∞Ä
const style = document.createElement('style');
style.textContent = `
  @keyframes slideInDown {
    from {
      opacity: 0;
      transform: translateX(-50%) translateY(-100%);
    }
    to {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
  }
  
  @keyframes slideOutUp {
    from {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
    to {
      opacity: 0;
      transform: translateX(-50%) translateY(-100%);
    }
  }
`;
document.head.appendChild(style);
